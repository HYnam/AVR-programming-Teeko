
A2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000010e4  00001178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000152  0080010e  0080010e  00001186  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001186  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c18  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e28  00000000  00000000  0000302c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f36  00000000  00000000  00003e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000058c  00000000  00000000  00004d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000984  00000000  00000000  00005318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000100d  00000000  00000000  00005c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00006ca9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__ctors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_4>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__vector_14>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 2a 04 	jmp	0x854	; 0x854 <__vector_18>
      4c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_19>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	20 20       	and	r2, r0
	...

0000006b <__c.2045>:
      6b:	54 45 45 4b 4f 00                                   TEEKO.

00000071 <__c.2040>:
      71:	2b 2d 2d 2b 2d 2d 2b 2d 2d 2b 2d 2d 2b 2d 2d 2b     +--+--+--+--+--+
	...

00000082 <__c.2035>:
      82:	7c 20 20 7c 20 20 7c 20 20 7c 20 20 7c 20 20 7c     |  |  |  |  |  |
	...

00000093 <__c.2033>:
      93:	2b 2d 2d 2b 2d 2d 2b 2d 2d 2b 2d 2d 2b 2d 2d 2b     +--+--+--+--+--+
	...

000000a4 <__c.2227>:
      a4:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      b4:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000c2 <__c.2225>:
      c2:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000cc <__c.2205>:
      cc:	43 53 53 45 32 30 31 30 20 70 72 6f 6a 65 63 74     CSSE2010 project
      dc:	20 62 79 20 48 69 75 20 59 69 20 4e 41 4d 20 34      by Hiu Yi NAM 4
      ec:	36 36 30 34 35 36 33 00                             6604563.

000000f4 <__c.2203>:
      f4:	54 65 65 6b 6f 00                                   Teeko.

000000fa <__c.2054>:
      fa:	1b 5b 3f 32 35 6c 00                                .[?25l.

00000101 <__c.2050>:
     101:	1b 5b 25 64 6d 00                                   .[%dm.

00000107 <__c.2040>:
     107:	1b 5b 32 4a 00                                      .[2J.

0000010c <__c.2030>:
     10c:	1b 5b 30 6d 00                                      .[0m.

00000111 <__c.2025>:
     111:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

0000011a <__ctors_end>:
     11a:	11 24       	eor	r1, r1
     11c:	1f be       	out	0x3f, r1	; 63
     11e:	cf ef       	ldi	r28, 0xFF	; 255
     120:	d8 e0       	ldi	r29, 0x08	; 8
     122:	de bf       	out	0x3e, r29	; 62
     124:	cd bf       	out	0x3d, r28	; 61

00000126 <__do_copy_data>:
     126:	11 e0       	ldi	r17, 0x01	; 1
     128:	a0 e0       	ldi	r26, 0x00	; 0
     12a:	b1 e0       	ldi	r27, 0x01	; 1
     12c:	e4 ee       	ldi	r30, 0xE4	; 228
     12e:	f0 e1       	ldi	r31, 0x10	; 16
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x10>
     132:	05 90       	lpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	ae 30       	cpi	r26, 0x0E	; 14
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0xc>

0000013c <__do_clear_bss>:
     13c:	22 e0       	ldi	r18, 0x02	; 2
     13e:	ae e0       	ldi	r26, 0x0E	; 14
     140:	b1 e0       	ldi	r27, 0x01	; 1
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	a0 36       	cpi	r26, 0x60	; 96
     148:	b2 07       	cpc	r27, r18
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	0e 94 24 03 	call	0x648	; 0x648 <main>
     150:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 82)
	PCICR |= (1<<PCIE1);
     158:	e8 e6       	ldi	r30, 0x68	; 104
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	82 60       	ori	r24, 0x02	; 2
     160:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 82)
	PCIFR |= (1<<PCIF1);
     162:	8b b3       	in	r24, 0x1b	; 27
     164:	82 60       	ori	r24, 0x02	; 2
     166:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 83)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     168:	ec e6       	ldi	r30, 0x6C	; 108
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	8f 60       	ori	r24, 0x0F	; 15
     170:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     172:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <queue_length>
	
	// Set the last button pressed time for all pins to be zero
	// This is not the current time as that would enforce an ordering
	// on the hardware initialisation (i.e that the timer would have
	// to be set up first)
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	0d c0       	rjmp	.+26     	; 0x194 <init_button_interrupts+0x3c>
		last_button_time[pin] = 0;
     17a:	e8 2f       	mov	r30, r24
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	ee 0f       	add	r30, r30
     180:	ff 1f       	adc	r31, r31
     182:	ee 0f       	add	r30, r30
     184:	ff 1f       	adc	r31, r31
     186:	e2 5f       	subi	r30, 0xF2	; 242
     188:	fe 4f       	sbci	r31, 0xFE	; 254
     18a:	10 82       	st	Z, r1
     18c:	11 82       	std	Z+1, r1	; 0x01
     18e:	12 82       	std	Z+2, r1	; 0x02
     190:	13 82       	std	Z+3, r1	; 0x03
	
	// Set the last button pressed time for all pins to be zero
	// This is not the current time as that would enforce an ordering
	// on the hardware initialisation (i.e that the timer would have
	// to be set up first)
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     192:	8f 5f       	subi	r24, 0xFF	; 255
     194:	84 30       	cpi	r24, 0x04	; 4
     196:	88 f3       	brcs	.-30     	; 0x17a <init_button_interrupts+0x22>
		last_button_time[pin] = 0;
	}
}
     198:	08 95       	ret

0000019a <button_pushed>:

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     19a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <queue_length>
     19e:	18 16       	cp	r1, r24
     1a0:	14 f5       	brge	.+68     	; 0x1e6 <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     1a2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     1a6:	6f b7       	in	r22, 0x3f	; 63
		cli();
     1a8:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	09 c0       	rjmp	.+18     	; 0x1c0 <button_pushed+0x26>
			button_queue[i-1] = button_queue[i];
     1ae:	f9 01       	movw	r30, r18
     1b0:	e1 5e       	subi	r30, 0xE1	; 225
     1b2:	fe 4f       	sbci	r31, 0xFE	; 254
     1b4:	40 81       	ld	r20, Z
     1b6:	f9 01       	movw	r30, r18
     1b8:	e2 5e       	subi	r30, 0xE2	; 226
     1ba:	fe 4f       	sbci	r31, 0xFE	; 254
     1bc:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     1be:	9f 5f       	subi	r25, 0xFF	; 255
     1c0:	29 2f       	mov	r18, r25
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <queue_length>
     1c8:	04 2e       	mov	r0, r20
     1ca:	00 0c       	add	r0, r0
     1cc:	55 0b       	sbc	r21, r21
     1ce:	24 17       	cp	r18, r20
     1d0:	35 07       	cpc	r19, r21
     1d2:	6c f3       	brlt	.-38     	; 0x1ae <button_pushed+0x14>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     1d4:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <queue_length>
     1d8:	91 50       	subi	r25, 0x01	; 1
     1da:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <queue_length>
		
		if(interrupts_were_enabled) {
     1de:	66 23       	and	r22, r22
     1e0:	1c f4       	brge	.+6      	; 0x1e8 <button_pushed+0x4e>
			// Turn them back on again
			sei();
     1e2:	78 94       	sei
     1e4:	08 95       	ret
		last_button_time[pin] = 0;
	}
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     1e6:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     1e8:	08 95       	ret

000001ea <__vector_4>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	cf 92       	push	r12
     1f6:	df 92       	push	r13
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	2f 93       	push	r18
     202:	3f 93       	push	r19
     204:	4f 93       	push	r20
     206:	5f 93       	push	r21
     208:	6f 93       	push	r22
     20a:	7f 93       	push	r23
     20c:	8f 93       	push	r24
     20e:	9f 93       	push	r25
     210:	af 93       	push	r26
     212:	bf 93       	push	r27
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	ef 93       	push	r30
     21a:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINC & 0x0F;
     21c:	d6 b1       	in	r29, 0x06	; 6
     21e:	df 70       	andi	r29, 0x0F	; 15
	
	uint32_t press_time = get_current_time();
     220:	0e 94 ce 04 	call	0x99c	; 0x99c <get_current_time>
     224:	6b 01       	movw	r12, r22
     226:	7c 01       	movw	r14, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any buttons which have changed have their debounce reference time updated
	// Any button pushes are added to the queue of button pushes (if
	// there is space). A button press is a transition from 0 in the 
	// last_button_state bit to a 1 in the button_state.
	for(uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     228:	c0 e0       	ldi	r28, 0x00	; 0
     22a:	66 c0       	rjmp	.+204    	; 0x2f8 <__vector_4+0x10e>
		if (button_state & (1<<pin) && !(last_button_state & (1<<pin))) {
     22c:	0c 2f       	mov	r16, r28
     22e:	10 e0       	ldi	r17, 0x00	; 0
     230:	8d 2f       	mov	r24, r29
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0c 2e       	mov	r0, r28
     236:	02 c0       	rjmp	.+4      	; 0x23c <__vector_4+0x52>
     238:	95 95       	asr	r25
     23a:	87 95       	ror	r24
     23c:	0a 94       	dec	r0
     23e:	e2 f7       	brpl	.-8      	; 0x238 <__vector_4+0x4e>
     240:	9c 01       	movw	r18, r24
     242:	21 70       	andi	r18, 0x01	; 1
     244:	33 27       	eor	r19, r19
     246:	80 ff       	sbrs	r24, 0
     248:	3c c0       	rjmp	.+120    	; 0x2c2 <__vector_4+0xd8>
     24a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <last_button_state>
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0c 2e       	mov	r0, r28
     252:	02 c0       	rjmp	.+4      	; 0x258 <__vector_4+0x6e>
     254:	95 95       	asr	r25
     256:	87 95       	ror	r24
     258:	0a 94       	dec	r0
     25a:	e2 f7       	brpl	.-8      	; 0x254 <__vector_4+0x6a>
     25c:	80 fd       	sbrc	r24, 0
     25e:	31 c0       	rjmp	.+98     	; 0x2c2 <__vector_4+0xd8>
			// This is a transition from 0 to 1 on this pin
			if (queue_length < BUTTON_QUEUE_SIZE && 
     260:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <queue_length>
     264:	84 30       	cpi	r24, 0x04	; 4
     266:	fc f4       	brge	.+62     	; 0x2a6 <__vector_4+0xbc>
					press_time >= last_button_time[pin] + DEBOUNCE_TIME) {
     268:	f8 01       	movw	r30, r16
     26a:	ee 0f       	add	r30, r30
     26c:	ff 1f       	adc	r31, r31
     26e:	ee 0f       	add	r30, r30
     270:	ff 1f       	adc	r31, r31
     272:	e2 5f       	subi	r30, 0xF2	; 242
     274:	fe 4f       	sbci	r31, 0xFE	; 254
     276:	80 81       	ld	r24, Z
     278:	91 81       	ldd	r25, Z+1	; 0x01
     27a:	a2 81       	ldd	r26, Z+2	; 0x02
     27c:	b3 81       	ldd	r27, Z+3	; 0x03
     27e:	4e 96       	adiw	r24, 0x1e	; 30
     280:	a1 1d       	adc	r26, r1
     282:	b1 1d       	adc	r27, r1
	// there is space). A button press is a transition from 0 in the 
	// last_button_state bit to a 1 in the button_state.
	for(uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
		if (button_state & (1<<pin) && !(last_button_state & (1<<pin))) {
			// This is a transition from 0 to 1 on this pin
			if (queue_length < BUTTON_QUEUE_SIZE && 
     284:	c8 16       	cp	r12, r24
     286:	d9 06       	cpc	r13, r25
     288:	ea 06       	cpc	r14, r26
     28a:	fb 06       	cpc	r15, r27
     28c:	60 f0       	brcs	.+24     	; 0x2a6 <__vector_4+0xbc>
					press_time >= last_button_time[pin] + DEBOUNCE_TIME) {
				// Add the button push to the queue (and update the
				// length of the queue
				button_queue[queue_length++] = pin;	
     28e:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <queue_length>
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	8e 0f       	add	r24, r30
     296:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <queue_length>
     29a:	0e 2e       	mov	r0, r30
     29c:	00 0c       	add	r0, r0
     29e:	ff 0b       	sbc	r31, r31
     2a0:	e1 5e       	subi	r30, 0xE1	; 225
     2a2:	fe 4f       	sbci	r31, 0xFE	; 254
     2a4:	c0 83       	st	Z, r28
			}
			// Any button press, even if it is not added to the queue should
			// be registered for debouncing
			last_button_time[pin] = get_current_time();
     2a6:	0e 94 ce 04 	call	0x99c	; 0x99c <get_current_time>
     2aa:	00 0f       	add	r16, r16
     2ac:	11 1f       	adc	r17, r17
     2ae:	00 0f       	add	r16, r16
     2b0:	11 1f       	adc	r17, r17
     2b2:	f8 01       	movw	r30, r16
     2b4:	e2 5f       	subi	r30, 0xF2	; 242
     2b6:	fe 4f       	sbci	r31, 0xFE	; 254
     2b8:	60 83       	st	Z, r22
     2ba:	71 83       	std	Z+1, r23	; 0x01
     2bc:	82 83       	std	Z+2, r24	; 0x02
     2be:	93 83       	std	Z+3, r25	; 0x03
     2c0:	1a c0       	rjmp	.+52     	; 0x2f6 <__vector_4+0x10c>
		} else if (!(button_state & (1<<pin)) && last_button_state & (1<<pin)) {
     2c2:	23 2b       	or	r18, r19
     2c4:	c1 f4       	brne	.+48     	; 0x2f6 <__vector_4+0x10c>
     2c6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <last_button_state>
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	00 2e       	mov	r0, r16
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <__vector_4+0xea>
     2d0:	95 95       	asr	r25
     2d2:	87 95       	ror	r24
     2d4:	0a 94       	dec	r0
     2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <__vector_4+0xe6>
     2d8:	80 ff       	sbrs	r24, 0
     2da:	0d c0       	rjmp	.+26     	; 0x2f6 <__vector_4+0x10c>
			// This is a transition from 1 to 0 on this pin.
			// Update the debounce timer anyway because it can bounce on release
			last_button_time[pin] = get_current_time();
     2dc:	0e 94 ce 04 	call	0x99c	; 0x99c <get_current_time>
     2e0:	00 0f       	add	r16, r16
     2e2:	11 1f       	adc	r17, r17
     2e4:	00 0f       	add	r16, r16
     2e6:	11 1f       	adc	r17, r17
     2e8:	f8 01       	movw	r30, r16
     2ea:	e2 5f       	subi	r30, 0xF2	; 242
     2ec:	fe 4f       	sbci	r31, 0xFE	; 254
     2ee:	60 83       	st	Z, r22
     2f0:	71 83       	std	Z+1, r23	; 0x01
     2f2:	82 83       	std	Z+2, r24	; 0x02
     2f4:	93 83       	std	Z+3, r25	; 0x03
	// Iterate over all the buttons and see which ones have changed.
	// Any buttons which have changed have their debounce reference time updated
	// Any button pushes are added to the queue of button pushes (if
	// there is space). A button press is a transition from 0 in the 
	// last_button_state bit to a 1 in the button_state.
	for(uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     2f6:	cf 5f       	subi	r28, 0xFF	; 255
     2f8:	c4 30       	cpi	r28, 0x04	; 4
     2fa:	08 f4       	brcc	.+2      	; 0x2fe <__vector_4+0x114>
     2fc:	97 cf       	rjmp	.-210    	; 0x22c <__vector_4+0x42>
			last_button_time[pin] = get_current_time();
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     2fe:	d0 93 23 01 	sts	0x0123, r29	; 0x800123 <last_button_state>
     302:	ff 91       	pop	r31
     304:	ef 91       	pop	r30
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	bf 91       	pop	r27
     30c:	af 91       	pop	r26
     30e:	9f 91       	pop	r25
     310:	8f 91       	pop	r24
     312:	7f 91       	pop	r23
     314:	6f 91       	pop	r22
     316:	5f 91       	pop	r21
     318:	4f 91       	pop	r20
     31a:	3f 91       	pop	r19
     31c:	2f 91       	pop	r18
     31e:	1f 91       	pop	r17
     320:	0f 91       	pop	r16
     322:	ff 90       	pop	r15
     324:	ef 90       	pop	r14
     326:	df 90       	pop	r13
     328:	cf 90       	pop	r12
     32a:	0f 90       	pop	r0
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	0f 90       	pop	r0
     330:	1f 90       	pop	r1
     332:	18 95       	reti

00000334 <initialise_display>:
#include "display.h"
#include <stdio.h>
#include <avr/pgmspace.h>
#include "terminalio.h"

void initialise_display(void) {
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
	// first turn off the cursor
	hide_cursor();
     33a:	0e 94 ad 04 	call	0x95a	; 0x95a <hide_cursor>

	// next build an empty board
	set_display_attribute(FG_YELLOW);
     33e:	81 e2       	ldi	r24, 0x21	; 33
     340:	0e 94 a0 04 	call	0x940	; 0x940 <set_display_attribute>
	for (uint8_t row = 0; row < HEIGHT; row++) {
     344:	10 e0       	ldi	r17, 0x00	; 0
     346:	25 c0       	rjmp	.+74     	; 0x392 <initialise_display+0x5e>
		move_terminal_cursor(TERMINAL_BOARD_X, TERMINAL_BOARD_Y+2*row);
     348:	c1 2f       	mov	r28, r17
     34a:	d0 e0       	ldi	r29, 0x00	; 0
     34c:	be 01       	movw	r22, r28
     34e:	66 0f       	add	r22, r22
     350:	77 1f       	adc	r23, r23
     352:	6b 5f       	subi	r22, 0xFB	; 251
     354:	7f 4f       	sbci	r23, 0xFF	; 255
     356:	8d e2       	ldi	r24, 0x2D	; 45
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <move_terminal_cursor>
		printf_P(PSTR("+--+--+--+--+--+"));
     35e:	83 e9       	ldi	r24, 0x93	; 147
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	9f 93       	push	r25
     364:	8f 93       	push	r24
     366:	0e 94 82 05 	call	0xb04	; 0xb04 <printf_P>
		move_terminal_cursor(TERMINAL_BOARD_X, TERMINAL_BOARD_Y+2*row+1);
     36a:	be 01       	movw	r22, r28
     36c:	6d 5f       	subi	r22, 0xFD	; 253
     36e:	7f 4f       	sbci	r23, 0xFF	; 255
     370:	66 0f       	add	r22, r22
     372:	77 1f       	adc	r23, r23
     374:	8d e2       	ldi	r24, 0x2D	; 45
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 7d 04 	call	0x8fa	; 0x8fa <move_terminal_cursor>
		printf_P(PSTR("|  |  |  |  |  |"));
     37c:	82 e8       	ldi	r24, 0x82	; 130
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	9f 93       	push	r25
     382:	8f 93       	push	r24
     384:	0e 94 82 05 	call	0xb04	; 0xb04 <printf_P>
	// first turn off the cursor
	hide_cursor();

	// next build an empty board
	set_display_attribute(FG_YELLOW);
	for (uint8_t row = 0; row < HEIGHT; row++) {
     388:	1f 5f       	subi	r17, 0xFF	; 255
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	15 30       	cpi	r17, 0x05	; 5
     394:	c8 f2       	brcs	.-78     	; 0x348 <initialise_display+0x14>
		move_terminal_cursor(TERMINAL_BOARD_X, TERMINAL_BOARD_Y+2*row);
		printf_P(PSTR("+--+--+--+--+--+"));
		move_terminal_cursor(TERMINAL_BOARD_X, TERMINAL_BOARD_Y+2*row+1);
		printf_P(PSTR("|  |  |  |  |  |"));
	}
	move_terminal_cursor(TERMINAL_BOARD_X, TERMINAL_BOARD_Y+2*HEIGHT);
     396:	6f e0       	ldi	r22, 0x0F	; 15
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	8d e2       	ldi	r24, 0x2D	; 45
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <move_terminal_cursor>
	printf_P(PSTR("+--+--+--+--+--+"));
     3a2:	81 e7       	ldi	r24, 0x71	; 113
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	9f 93       	push	r25
     3a8:	8f 93       	push	r24
     3aa:	0e 94 82 05 	call	0xb04	; 0xb04 <printf_P>

	// clear the colour settings so we don't print other things in yellow
	normal_display_mode();
     3ae:	0e 94 8e 04 	call	0x91c	; 0x91c <normal_display_mode>
}
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	08 95       	ret

000003be <start_display>:

void start_display(void) {
	move_terminal_cursor(TERMINAL_BOARD_X, TERMINAL_BOARD_Y);
     3be:	65 e0       	ldi	r22, 0x05	; 5
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	8d e2       	ldi	r24, 0x2D	; 45
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <move_terminal_cursor>
	set_display_attribute(FG_GREEN);
     3ca:	80 e2       	ldi	r24, 0x20	; 32
     3cc:	0e 94 a0 04 	call	0x940	; 0x940 <set_display_attribute>
	printf_P(PSTR("TEEKO"));
     3d0:	8b e6       	ldi	r24, 0x6B	; 107
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	9f 93       	push	r25
     3d6:	8f 93       	push	r24
     3d8:	0e 94 82 05 	call	0xb04	; 0xb04 <printf_P>
}
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	08 95       	ret

000003e2 <update_square_colour>:

void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	c8 2f       	mov	r28, r24
     3e8:	d6 2f       	mov	r29, r22
	// determine which colour corresponds to this object
	DisplayParameter backgroundColour;
	if (object == PLAYER_1) {
     3ea:	41 30       	cpi	r20, 0x01	; 1
     3ec:	31 f0       	breq	.+12     	; 0x3fa <update_square_colour+0x18>
		backgroundColour = TERMINAL_COLOUR_P1;
		} else if (object == PLAYER_2) {
     3ee:	42 30       	cpi	r20, 0x02	; 2
     3f0:	31 f0       	breq	.+12     	; 0x3fe <update_square_colour+0x1c>
		backgroundColour = TERMINAL_COLOUR_P2;
		} else if (object == CURSOR) {
     3f2:	43 30       	cpi	r20, 0x03	; 3
     3f4:	31 f4       	brne	.+12     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		backgroundColour = TERMINAL_COLOUR_CURSOR;
     3f6:	8b e2       	ldi	r24, 0x2B	; 43
     3f8:	05 c0       	rjmp	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>

void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	// determine which colour corresponds to this object
	DisplayParameter backgroundColour;
	if (object == PLAYER_1) {
		backgroundColour = TERMINAL_COLOUR_P1;
     3fa:	8a e2       	ldi	r24, 0x2A	; 42
     3fc:	03 c0       	rjmp	.+6      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		} else if (object == PLAYER_2) {
		backgroundColour = TERMINAL_COLOUR_P2;
     3fe:	89 e2       	ldi	r24, 0x29	; 41
     400:	01 c0       	rjmp	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		} else if (object == CURSOR) {
		backgroundColour = TERMINAL_COLOUR_CURSOR;
		} else {
		// anything unexpected will be black
		backgroundColour = TERMINAL_COLOUR_EMPTY;
     402:	88 e2       	ldi	r24, 0x28	; 40
	}

	// set the background colour to be the determined colour
	// when we enter a space this will appear as a solid block
	set_display_attribute(backgroundColour);
     404:	0e 94 a0 04 	call	0x940	; 0x940 <set_display_attribute>
	// update the square at the given location
	// note that two spaces form roughly a square so that is used instead of one space
	// also note that the terminal y values count from the top
	// but our referencing counts from the bottom, so the y position is inverted
	move_terminal_cursor(TERMINAL_BOARD_X + 1 + 3 * x,
	TERMINAL_BOARD_Y + 1 + 2 * (HEIGHT - y - 1));
     408:	67 e0       	ldi	r22, 0x07	; 7
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	6d 1b       	sub	r22, r29
     40e:	71 09       	sbc	r23, r1

	// update the square at the given location
	// note that two spaces form roughly a square so that is used instead of one space
	// also note that the terminal y values count from the top
	// but our referencing counts from the bottom, so the y position is inverted
	move_terminal_cursor(TERMINAL_BOARD_X + 1 + 3 * x,
     410:	8c 2f       	mov	r24, r28
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	9c 01       	movw	r18, r24
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	82 0f       	add	r24, r18
     41c:	93 1f       	adc	r25, r19
     41e:	66 0f       	add	r22, r22
     420:	77 1f       	adc	r23, r23
     422:	8e 96       	adiw	r24, 0x2e	; 46
     424:	0e 94 7d 04 	call	0x8fa	; 0x8fa <move_terminal_cursor>
	TERMINAL_BOARD_Y + 1 + 2 * (HEIGHT - y - 1));
	printf_P(PSTR("  ")); // print two spaces, since we set the background colour
     428:	88 e6       	ldi	r24, 0x68	; 104
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	9f 93       	push	r25
     42e:	8f 93       	push	r24
     430:	0e 94 82 05 	call	0xb04	; 0xb04 <printf_P>

	normal_display_mode(); // remove the display attribute
     434:	0e 94 8e 04 	call	0x91c	; 0x91c <normal_display_mode>
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <initialise_game>:
uint8_t current_player;

void initialise_game(void) {
	
	// initialise the display we are using
	initialise_display();
     442:	0e 94 9a 01 	call	0x334	; 0x334 <initialise_display>
	
	// initialise the board to be all empty
	for (uint8_t x = 0; x < WIDTH; x++) {
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	14 c0       	rjmp	.+40     	; 0x472 <initialise_game+0x30>
		for (uint8_t y = 0; y < HEIGHT; y++) {
			board[x][y] = EMPTY_SQUARE;
     44a:	83 2f       	mov	r24, r19
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	fc 01       	movw	r30, r24
     450:	ee 0f       	add	r30, r30
     452:	ff 1f       	adc	r31, r31
     454:	ee 0f       	add	r30, r30
     456:	ff 1f       	adc	r31, r31
     458:	e8 0f       	add	r30, r24
     45a:	f9 1f       	adc	r31, r25
     45c:	e6 5d       	subi	r30, 0xD6	; 214
     45e:	fe 4f       	sbci	r31, 0xFE	; 254
     460:	e2 0f       	add	r30, r18
     462:	f1 1d       	adc	r31, r1
     464:	10 82       	st	Z, r1
	// initialise the display we are using
	initialise_display();
	
	// initialise the board to be all empty
	for (uint8_t x = 0; x < WIDTH; x++) {
		for (uint8_t y = 0; y < HEIGHT; y++) {
     466:	2f 5f       	subi	r18, 0xFF	; 255
     468:	01 c0       	rjmp	.+2      	; 0x46c <initialise_game+0x2a>
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	25 30       	cpi	r18, 0x05	; 5
     46e:	68 f3       	brcs	.-38     	; 0x44a <initialise_game+0x8>
	
	// initialise the display we are using
	initialise_display();
	
	// initialise the board to be all empty
	for (uint8_t x = 0; x < WIDTH; x++) {
     470:	3f 5f       	subi	r19, 0xFF	; 255
     472:	35 30       	cpi	r19, 0x05	; 5
     474:	d0 f3       	brcs	.-12     	; 0x46a <initialise_game+0x28>
			board[x][y] = EMPTY_SQUARE;
		}
	}
		
	// set the starting player
	current_player = PLAYER_1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <current_player>
	
	// also set where the cursor starts
	cursor_x = CURSOR_X_START;
     47c:	82 e0       	ldi	r24, 0x02	; 2
     47e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <cursor_x>
	cursor_y = CURSOR_Y_START;
     482:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <cursor_y>
	cursor_visible = 0;
     486:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <cursor_visible>
     48a:	08 95       	ret

0000048c <get_piece_at>:
}

uint8_t get_piece_at(uint8_t x, uint8_t y) {
	// check the bounds, anything outside the bounds
	// will be considered empty
	if (x < 0 || x >= WIDTH || y < 0 || y >= WIDTH) {
     48c:	85 30       	cpi	r24, 0x05	; 5
     48e:	80 f4       	brcc	.+32     	; 0x4b0 <get_piece_at+0x24>
     490:	65 30       	cpi	r22, 0x05	; 5
     492:	80 f4       	brcc	.+32     	; 0x4b4 <get_piece_at+0x28>
		return EMPTY_SQUARE;
	} else {
		//if in the bounds, just index into the array
		return board[x][y];
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	fc 01       	movw	r30, r24
     498:	ee 0f       	add	r30, r30
     49a:	ff 1f       	adc	r31, r31
     49c:	ee 0f       	add	r30, r30
     49e:	ff 1f       	adc	r31, r31
     4a0:	e8 0f       	add	r30, r24
     4a2:	f9 1f       	adc	r31, r25
     4a4:	e6 5d       	subi	r30, 0xD6	; 214
     4a6:	fe 4f       	sbci	r31, 0xFE	; 254
     4a8:	e6 0f       	add	r30, r22
     4aa:	f1 1d       	adc	r31, r1
     4ac:	80 81       	ld	r24, Z
     4ae:	08 95       	ret

uint8_t get_piece_at(uint8_t x, uint8_t y) {
	// check the bounds, anything outside the bounds
	// will be considered empty
	if (x < 0 || x >= WIDTH || y < 0 || y >= WIDTH) {
		return EMPTY_SQUARE;
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	08 95       	ret
     4b4:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		//if in the bounds, just index into the array
		return board[x][y];
	}
}
     4b6:	08 95       	ret

000004b8 <flash_cursor>:

void flash_cursor(void) {
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
	
	if (cursor_visible) {
     4bc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <cursor_visible>
     4c0:	88 23       	and	r24, r24
     4c2:	71 f0       	breq	.+28     	; 0x4e0 <flash_cursor+0x28>
		// we need to flash the cursor off, it should be replaced by
		// the colour of the piece which is at that location
		uint8_t piece_at_cursor = get_piece_at(cursor_x, cursor_y);
     4c4:	d0 91 29 01 	lds	r29, 0x0129	; 0x800129 <cursor_y>
     4c8:	c0 91 45 01 	lds	r28, 0x0145	; 0x800145 <cursor_x>
     4cc:	6d 2f       	mov	r22, r29
     4ce:	8c 2f       	mov	r24, r28
     4d0:	0e 94 46 02 	call	0x48c	; 0x48c <get_piece_at>
		update_square_colour(cursor_x, cursor_y, piece_at_cursor);
     4d4:	48 2f       	mov	r20, r24
     4d6:	6d 2f       	mov	r22, r29
     4d8:	8c 2f       	mov	r24, r28
     4da:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <update_square_colour>
     4de:	07 c0       	rjmp	.+14     	; 0x4ee <flash_cursor+0x36>
		
	} else {
		// we need to flash the cursor on
		update_square_colour(cursor_x, cursor_y, CURSOR);
     4e0:	43 e0       	ldi	r20, 0x03	; 3
     4e2:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <cursor_y>
     4e6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <cursor_x>
     4ea:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <update_square_colour>
	}
	cursor_visible = 1 - cursor_visible; //alternate between 0 and 1
     4ee:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <cursor_visible>
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	89 1b       	sub	r24, r25
     4f6:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <cursor_visible>
}
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <move_display_cursor>:

//check the header file game.h for a description of what this function should do
// (it may contain some hints as to how to move the pieces)
void move_display_cursor(int8_t dx, int8_t dy) {
     500:	08 95       	ret

00000502 <is_game_over>:

uint8_t is_game_over(void) {
	// YOUR CODE HERE
	// Detect if the game is over i.e. if a player has won.
	return 0;
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	08 95       	ret

00000506 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	init_button_interrupts();
     506:	0e 94 ac 00 	call	0x158	; 0x158 <init_button_interrupts>
	// Setup serial port for 38400 baud communication with no echo
	// of incoming characters
	init_serial_stdio(38400,0);
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	76 e9       	ldi	r23, 0x96	; 150
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 95 03 	call	0x72a	; 0x72a <init_serial_stdio>
	
	init_timer0();
     518:	0e 94 b6 04 	call	0x96c	; 0x96c <init_timer0>
	
	// Turn on global interrupts
	sei();
     51c:	78 94       	sei
     51e:	08 95       	ret

00000520 <start_screen>:
}

void start_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
     520:	0e 94 97 04 	call	0x92e	; 0x92e <clear_terminal>
	move_terminal_cursor(10,10);
     524:	6a e0       	ldi	r22, 0x0A	; 10
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	8a e0       	ldi	r24, 0x0A	; 10
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <move_terminal_cursor>
	printf_P(PSTR("Teeko"));
     530:	84 ef       	ldi	r24, 0xF4	; 244
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	9f 93       	push	r25
     536:	8f 93       	push	r24
     538:	0e 94 82 05 	call	0xb04	; 0xb04 <printf_P>
	move_terminal_cursor(10,12);
     53c:	6c e0       	ldi	r22, 0x0C	; 12
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	8a e0       	ldi	r24, 0x0A	; 10
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 7d 04 	call	0x8fa	; 0x8fa <move_terminal_cursor>
	printf_P(PSTR("CSSE2010 project by Hiu Yi NAM 46604563"));
     548:	8c ec       	ldi	r24, 0xCC	; 204
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	9f 93       	push	r25
     54e:	8f 93       	push	r24
     550:	0e 94 82 05 	call	0xb04	; 0xb04 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	start_display();
     554:	0e 94 df 01 	call	0x3be	; 0x3be <start_display>
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available()) {
     560:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <serial_input_available>
     564:	88 23       	and	r24, r24
     566:	39 f0       	breq	.+14     	; 0x576 <start_screen+0x56>
			serial_input = fgetc(stdin);
     568:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__iob>
     56c:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <__iob+0x1>
     570:	0e 94 44 05 	call	0xa88	; 0xa88 <fgetc>
     574:	01 c0       	rjmp	.+2      	; 0x578 <start_screen+0x58>
	while(1) {
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     576:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S') {
     578:	83 37       	cpi	r24, 0x73	; 115
     57a:	31 f0       	breq	.+12     	; 0x588 <start_screen+0x68>
     57c:	83 35       	cpi	r24, 0x53	; 83
     57e:	21 f0       	breq	.+8      	; 0x588 <start_screen+0x68>
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
     580:	0e 94 cd 00 	call	0x19a	; 0x19a <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
     584:	8f 3f       	cpi	r24, 0xFF	; 255
     586:	61 f3       	breq	.-40     	; 0x560 <start_screen+0x40>
     588:	08 95       	ret

0000058a <new_game>:
	}
}

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
     58a:	0e 94 97 04 	call	0x92e	; 0x92e <clear_terminal>
	
	// Initialise the game and display
	initialise_game();
     58e:	0e 94 21 02 	call	0x442	; 0x442 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     592:	0e 94 cd 00 	call	0x19a	; 0x19a <button_pushed>
	clear_serial_input_buffer();
     596:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <clear_serial_input_buffer>
     59a:	08 95       	ret

0000059c <play_game>:
}

void play_game(void) {
     59c:	8f 92       	push	r8
     59e:	9f 92       	push	r9
     5a0:	af 92       	push	r10
     5a2:	bf 92       	push	r11
     5a4:	cf 92       	push	r12
     5a6:	df 92       	push	r13
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
	
	uint32_t last_flash_time, current_time;
	uint8_t btn; //the button pushed
	
	last_flash_time = get_current_time();
     5ac:	0e 94 ce 04 	call	0x99c	; 0x99c <get_current_time>
     5b0:	4b 01       	movw	r8, r22
     5b2:	5c 01       	movw	r10, r24
	
	// We play the game until it's over
	while(!is_game_over()) {
     5b4:	1b c0       	rjmp	.+54     	; 0x5ec <play_game+0x50>
		
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		btn = button_pushed();
     5b6:	0e 94 cd 00 	call	0x19a	; 0x19a <button_pushed>
		
		if (btn == BUTTON3_PUSHED) {
     5ba:	83 30       	cpi	r24, 0x03	; 3
     5bc:	21 f4       	brne	.+8      	; 0x5c6 <play_game+0x2a>
			// If button 3 is pushed, move left,
			// i.e decrease x by 1 and leave y the same
			move_display_cursor(-1, 0);
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	0e 94 80 02 	call	0x500	; 0x500 <move_display_cursor>
		}
	
		current_time = get_current_time();
     5c6:	0e 94 ce 04 	call	0x99c	; 0x99c <get_current_time>
     5ca:	6b 01       	movw	r12, r22
     5cc:	7c 01       	movw	r14, r24
		if(current_time >= last_flash_time + 500) {
     5ce:	d5 01       	movw	r26, r10
     5d0:	c4 01       	movw	r24, r8
     5d2:	8c 50       	subi	r24, 0x0C	; 12
     5d4:	9e 4f       	sbci	r25, 0xFE	; 254
     5d6:	af 4f       	sbci	r26, 0xFF	; 255
     5d8:	bf 4f       	sbci	r27, 0xFF	; 255
     5da:	c8 16       	cp	r12, r24
     5dc:	d9 06       	cpc	r13, r25
     5de:	ea 06       	cpc	r14, r26
     5e0:	fb 06       	cpc	r15, r27
     5e2:	20 f0       	brcs	.+8      	; 0x5ec <play_game+0x50>
			// 500ms (0.5 second) has passed since the last time we
			// flashed the cursor, so flash the cursor
			flash_cursor();
     5e4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <flash_cursor>
			
			// Update the most recent time the cursor was flashed
			last_flash_time = current_time;
     5e8:	46 01       	movw	r8, r12
     5ea:	57 01       	movw	r10, r14
	uint8_t btn; //the button pushed
	
	last_flash_time = get_current_time();
	
	// We play the game until it's over
	while(!is_game_over()) {
     5ec:	0e 94 81 02 	call	0x502	; 0x502 <is_game_over>
     5f0:	88 23       	and	r24, r24
     5f2:	09 f3       	breq	.-62     	; 0x5b6 <play_game+0x1a>
			// Update the most recent time the cursor was flashed
			last_flash_time = current_time;
		}
	}
	// We get here if the game is over.
}
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14
     5f8:	df 90       	pop	r13
     5fa:	cf 90       	pop	r12
     5fc:	bf 90       	pop	r11
     5fe:	af 90       	pop	r10
     600:	9f 90       	pop	r9
     602:	8f 90       	pop	r8
     604:	08 95       	ret

00000606 <handle_game_over>:

void handle_game_over() {
	move_terminal_cursor(10,14);
     606:	6e e0       	ldi	r22, 0x0E	; 14
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	8a e0       	ldi	r24, 0x0A	; 10
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     612:	82 ec       	ldi	r24, 0xC2	; 194
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	9f 93       	push	r25
     618:	8f 93       	push	r24
     61a:	0e 94 82 05 	call	0xb04	; 0xb04 <printf_P>
	move_terminal_cursor(10,15);
     61e:	6f e0       	ldi	r22, 0x0F	; 15
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	8a e0       	ldi	r24, 0x0A	; 10
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 7d 04 	call	0x8fa	; 0x8fa <move_terminal_cursor>
	printf_P(PSTR("Press a button to start again"));
     62a:	84 ea       	ldi	r24, 0xA4	; 164
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	0e 94 82 05 	call	0xb04	; 0xb04 <printf_P>
	
	while(button_pushed() == NO_BUTTON_PUSHED) {
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0e 94 cd 00 	call	0x19a	; 0x19a <button_pushed>
     642:	8f 3f       	cpi	r24, 0xFF	; 255
     644:	e1 f3       	breq	.-8      	; 0x63e <handle_game_over+0x38>
		; // wait
	}
	
}
     646:	08 95       	ret

00000648 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     648:	0e 94 83 02 	call	0x506	; 0x506 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	start_screen();
     64c:	0e 94 90 02 	call	0x520	; 0x520 <start_screen>
	
	// Loop forever,
	while(1) {
		new_game();
     650:	0e 94 c5 02 	call	0x58a	; 0x58a <new_game>
		play_game();
     654:	0e 94 ce 02 	call	0x59c	; 0x59c <play_game>
		handle_game_over();
     658:	0e 94 03 03 	call	0x606	; 0x606 <handle_game_over>
     65c:	f9 cf       	rjmp	.-14     	; 0x650 <main+0x8>

0000065e <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     65e:	cf 93       	push	r28
     660:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     662:	8a 30       	cpi	r24, 0x0A	; 10
     664:	19 f4       	brne	.+6      	; 0x66c <uart_put_char+0xe>
		uart_put_char('\r', stream);
     666:	8d e0       	ldi	r24, 0x0D	; 13
     668:	0e 94 2f 03 	call	0x65e	; 0x65e <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     66c:	9f b7       	in	r25, 0x3f	; 63
     66e:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     670:	02 c0       	rjmp	.+4      	; 0x676 <uart_put_char+0x18>
		if(!interrupts_enabled) {
     672:	99 23       	and	r25, r25
     674:	29 f1       	breq	.+74     	; 0x6c0 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     676:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <bytes_in_out_buffer>
     67a:	8f 3f       	cpi	r24, 0xFF	; 255
     67c:	d1 f3       	breq	.-12     	; 0x672 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     67e:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     680:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <out_insert_pos>
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	8e 0f       	add	r24, r30
     688:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <out_insert_pos>
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	e8 5b       	subi	r30, 0xB8	; 184
     690:	fe 4f       	sbci	r31, 0xFE	; 254
     692:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     694:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <bytes_in_out_buffer>
     698:	8f 5f       	subi	r24, 0xFF	; 255
     69a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     69e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <out_insert_pos>
     6a2:	8f 3f       	cpi	r24, 0xFF	; 255
     6a4:	11 f4       	brne	.+4      	; 0x6aa <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     6a6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     6aa:	e1 ec       	ldi	r30, 0xC1	; 193
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	80 62       	ori	r24, 0x20	; 32
     6b2:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     6b4:	99 23       	and	r25, r25
     6b6:	39 f0       	breq	.+14     	; 0x6c6 <uart_put_char+0x68>
		sei();
     6b8:	78 94       	sei
	}
	return 0;
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	05 c0       	rjmp	.+10     	; 0x6ca <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
}
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     6ce:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bytes_in_input_buffer>
     6d2:	88 23       	and	r24, r24
     6d4:	e1 f3       	breq	.-8      	; 0x6ce <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     6d6:	2f b7       	in	r18, 0x3f	; 63
     6d8:	20 78       	andi	r18, 0x80	; 128
	cli();
     6da:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     6dc:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <input_insert_pos>
     6e0:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <bytes_in_input_buffer>
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	83 1b       	sub	r24, r19
     6e8:	91 09       	sbc	r25, r1
     6ea:	5a f4       	brpl	.+22     	; 0x702 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     6ec:	e0 91 47 02 	lds	r30, 0x0247	; 0x800247 <input_insert_pos>
     6f0:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bytes_in_input_buffer>
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	e8 1b       	sub	r30, r24
     6f8:	f1 09       	sbc	r31, r1
     6fa:	e8 5a       	subi	r30, 0xA8	; 168
     6fc:	fd 4f       	sbci	r31, 0xFD	; 253
     6fe:	80 81       	ld	r24, Z
     700:	0a c0       	rjmp	.+20     	; 0x716 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     702:	e0 91 47 02 	lds	r30, 0x0247	; 0x800247 <input_insert_pos>
     706:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bytes_in_input_buffer>
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	e8 1b       	sub	r30, r24
     70e:	f1 09       	sbc	r31, r1
     710:	e8 5b       	subi	r30, 0xB8	; 184
     712:	fd 4f       	sbci	r31, 0xFD	; 253
     714:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     716:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <bytes_in_input_buffer>
     71a:	91 50       	subi	r25, 0x01	; 1
     71c:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <bytes_in_input_buffer>
	if(interrupts_enabled) {
     720:	22 23       	and	r18, r18
     722:	09 f0       	breq	.+2      	; 0x726 <uart_get_char+0x58>
		sei();
     724:	78 94       	sei
	}	
	return c;
}
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	08 95       	ret

0000072a <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     72a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <out_insert_pos>
	bytes_in_out_buffer = 0;
     72e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <bytes_in_out_buffer>
	input_insert_pos = 0;
     732:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <input_insert_pos>
	bytes_in_input_buffer = 0;
     736:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <bytes_in_input_buffer>
	input_overrun = 0;
     73a:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     73e:	40 93 24 01 	sts	0x0124, r20	; 0x800124 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     742:	dc 01       	movw	r26, r24
     744:	cb 01       	movw	r24, r22
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	aa 1f       	adc	r26, r26
     74c:	bb 1f       	adc	r27, r27
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	aa 1f       	adc	r26, r26
     754:	bb 1f       	adc	r27, r27
     756:	9c 01       	movw	r18, r24
     758:	ad 01       	movw	r20, r26
     75a:	22 0f       	add	r18, r18
     75c:	33 1f       	adc	r19, r19
     75e:	44 1f       	adc	r20, r20
     760:	55 1f       	adc	r21, r21
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	74 e2       	ldi	r23, 0x24	; 36
     766:	84 ef       	ldi	r24, 0xF4	; 244
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 03 05 	call	0xa06	; 0xa06 <__divmodsi4>
     76e:	ba 01       	movw	r22, r20
     770:	a9 01       	movw	r20, r18
     772:	4f 5f       	subi	r20, 0xFF	; 255
     774:	5f 4f       	sbci	r21, 0xFF	; 255
     776:	6f 4f       	sbci	r22, 0xFF	; 255
     778:	7f 4f       	sbci	r23, 0xFF	; 255
     77a:	db 01       	movw	r26, r22
     77c:	ca 01       	movw	r24, r20
     77e:	1a f4       	brpl	.+6      	; 0x786 <init_serial_stdio+0x5c>
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	a1 1d       	adc	r26, r1
     784:	b1 1d       	adc	r27, r1
     786:	b5 95       	asr	r27
     788:	a7 95       	ror	r26
     78a:	97 95       	ror	r25
     78c:	87 95       	ror	r24
     78e:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     790:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     794:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     798:	e1 ec       	ldi	r30, 0xC1	; 193
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	88 e1       	ldi	r24, 0x18	; 24
     79e:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     7a0:	80 81       	ld	r24, Z
     7a2:	80 68       	ori	r24, 0x80	; 128
     7a4:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     7a6:	ea e5       	ldi	r30, 0x5A	; 90
     7a8:	f2 e0       	ldi	r31, 0x02	; 2
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	93 83       	std	Z+3, r25	; 0x03
     7b0:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     7b2:	91 83       	std	Z+1, r25	; 0x01
     7b4:	80 83       	st	Z, r24
     7b6:	08 95       	ret

000007b8 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
     7b8:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <bytes_in_input_buffer>
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	91 11       	cpse	r25, r1
     7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <serial_input_available+0xc>
     7c2:	80 e0       	ldi	r24, 0x00	; 0
}
     7c4:	08 95       	ret

000007c6 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     7c6:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <input_insert_pos>
	bytes_in_input_buffer = 0;
     7ca:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <bytes_in_input_buffer>
     7ce:	08 95       	ret

000007d0 <__vector_19>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART_UDRE_vect) 
{
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	2f 93       	push	r18
     7dc:	8f 93       	push	r24
     7de:	9f 93       	push	r25
     7e0:	ef 93       	push	r30
     7e2:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     7e4:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <bytes_in_out_buffer>
     7e8:	88 23       	and	r24, r24
     7ea:	29 f1       	breq	.+74     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     7ec:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <out_insert_pos>
     7f0:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <bytes_in_out_buffer>
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	82 1b       	sub	r24, r18
     7f8:	91 09       	sbc	r25, r1
     7fa:	5a f4       	brpl	.+22     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     7fc:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <out_insert_pos>
     800:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <bytes_in_out_buffer>
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	e8 1b       	sub	r30, r24
     808:	f1 09       	sbc	r31, r1
     80a:	e9 5b       	subi	r30, 0xB9	; 185
     80c:	fd 4f       	sbci	r31, 0xFD	; 253
     80e:	90 81       	ld	r25, Z
     810:	0a c0       	rjmp	.+20     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     812:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <out_insert_pos>
     816:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <bytes_in_out_buffer>
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	e8 1b       	sub	r30, r24
     81e:	f1 09       	sbc	r31, r1
     820:	e8 5b       	subi	r30, 0xB8	; 184
     822:	fe 4f       	sbci	r31, 0xFE	; 254
     824:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     826:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <bytes_in_out_buffer>
     82a:	81 50       	subi	r24, 0x01	; 1
     82c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     830:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     834:	05 c0       	rjmp	.+10     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     836:	e1 ec       	ldi	r30, 0xC1	; 193
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	8f 7d       	andi	r24, 0xDF	; 223
     83e:	80 83       	st	Z, r24
	}
}
     840:	ff 91       	pop	r31
     842:	ef 91       	pop	r30
     844:	9f 91       	pop	r25
     846:	8f 91       	pop	r24
     848:	2f 91       	pop	r18
     84a:	0f 90       	pop	r0
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	0f 90       	pop	r0
     850:	1f 90       	pop	r1
     852:	18 95       	reti

00000854 <__vector_18>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART_RX_vect) 
{
     854:	1f 92       	push	r1
     856:	0f 92       	push	r0
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	0f 92       	push	r0
     85c:	11 24       	eor	r1, r1
     85e:	2f 93       	push	r18
     860:	3f 93       	push	r19
     862:	4f 93       	push	r20
     864:	5f 93       	push	r21
     866:	6f 93       	push	r22
     868:	7f 93       	push	r23
     86a:	8f 93       	push	r24
     86c:	9f 93       	push	r25
     86e:	af 93       	push	r26
     870:	bf 93       	push	r27
     872:	cf 93       	push	r28
     874:	ef 93       	push	r30
     876:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     878:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     87c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <do_echo>
     880:	88 23       	and	r24, r24
     882:	49 f0       	breq	.+18     	; 0x896 <__vector_18+0x42>
     884:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <bytes_in_out_buffer>
     888:	8f 3f       	cpi	r24, 0xFF	; 255
     88a:	29 f0       	breq	.+10     	; 0x896 <__vector_18+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	8c 2f       	mov	r24, r28
     892:	0e 94 2f 03 	call	0x65e	; 0x65e <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     896:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bytes_in_input_buffer>
     89a:	80 31       	cpi	r24, 0x10	; 16
     89c:	20 f0       	brcs	.+8      	; 0x8a6 <__vector_18+0x52>
		input_overrun = 1;
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <input_overrun>
     8a4:	18 c0       	rjmp	.+48     	; 0x8d6 <__vector_18+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     8a6:	cd 30       	cpi	r28, 0x0D	; 13
     8a8:	09 f4       	brne	.+2      	; 0x8ac <__vector_18+0x58>
			c = '\n';
     8aa:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     8ac:	e0 91 47 02 	lds	r30, 0x0247	; 0x800247 <input_insert_pos>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	8e 0f       	add	r24, r30
     8b4:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <input_insert_pos>
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	e8 5b       	subi	r30, 0xB8	; 184
     8bc:	fd 4f       	sbci	r31, 0xFD	; 253
     8be:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     8c0:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bytes_in_input_buffer>
     8c4:	8f 5f       	subi	r24, 0xFF	; 255
     8c6:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     8ca:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <input_insert_pos>
     8ce:	80 31       	cpi	r24, 0x10	; 16
     8d0:	11 f4       	brne	.+4      	; 0x8d6 <__vector_18+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     8d2:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <input_insert_pos>
		}
	}
}
     8d6:	ff 91       	pop	r31
     8d8:	ef 91       	pop	r30
     8da:	cf 91       	pop	r28
     8dc:	bf 91       	pop	r27
     8de:	af 91       	pop	r26
     8e0:	9f 91       	pop	r25
     8e2:	8f 91       	pop	r24
     8e4:	7f 91       	pop	r23
     8e6:	6f 91       	pop	r22
     8e8:	5f 91       	pop	r21
     8ea:	4f 91       	pop	r20
     8ec:	3f 91       	pop	r19
     8ee:	2f 91       	pop	r18
     8f0:	0f 90       	pop	r0
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	0f 90       	pop	r0
     8f6:	1f 90       	pop	r1
     8f8:	18 95       	reti

000008fa <move_terminal_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
     8fa:	9f 93       	push	r25
     8fc:	8f 93       	push	r24
     8fe:	7f 93       	push	r23
     900:	6f 93       	push	r22
     902:	81 e1       	ldi	r24, 0x11	; 17
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	9f 93       	push	r25
     908:	8f 93       	push	r24
     90a:	0e 94 82 05 	call	0xb04	; 0xb04 <printf_P>
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	08 95       	ret

0000091c <normal_display_mode>:
     91c:	8c e0       	ldi	r24, 0x0C	; 12
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	9f 93       	push	r25
     922:	8f 93       	push	r24
     924:	0e 94 82 05 	call	0xb04	; 0xb04 <printf_P>
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	08 95       	ret

0000092e <clear_terminal>:
     92e:	87 e0       	ldi	r24, 0x07	; 7
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	9f 93       	push	r25
     934:	8f 93       	push	r24
     936:	0e 94 82 05 	call	0xb04	; 0xb04 <printf_P>
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	08 95       	ret

00000940 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
     940:	1f 92       	push	r1
     942:	8f 93       	push	r24
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	9f 93       	push	r25
     94a:	8f 93       	push	r24
     94c:	0e 94 82 05 	call	0xb04	; 0xb04 <printf_P>
}
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	08 95       	ret

0000095a <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
     95a:	8a ef       	ldi	r24, 0xFA	; 250
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	9f 93       	push	r25
     960:	8f 93       	push	r24
     962:	0e 94 82 05 	call	0xb04	; 0xb04 <printf_P>
}
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	08 95       	ret

0000096c <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
     96c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <clockTicks>
     970:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <clockTicks+0x1>
     974:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <clockTicks+0x2>
     978:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
     97c:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 249;
     97e:	89 ef       	ldi	r24, 0xF9	; 249
     980:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
     982:	82 e0       	ldi	r24, 0x02	; 2
     984:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
     98a:	ee e6       	ldi	r30, 0x6E	; 110
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 81       	ld	r24, Z
     990:	82 60       	ori	r24, 0x02	; 2
     992:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
     994:	85 b3       	in	r24, 0x15	; 21
     996:	82 70       	andi	r24, 0x02	; 2
     998:	85 bb       	out	0x15, r24	; 21
     99a:	08 95       	ret

0000099c <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
     99c:	8f b7       	in	r24, 0x3f	; 63
     99e:	28 2f       	mov	r18, r24
     9a0:	20 78       	andi	r18, 0x80	; 128
	cli();
     9a2:	f8 94       	cli
	returnValue = clockTicks;
     9a4:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <clockTicks>
     9a8:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <clockTicks+0x1>
     9ac:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <clockTicks+0x2>
     9b0:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <clockTicks+0x3>
	if(interruptsOn) {
     9b4:	22 23       	and	r18, r18
     9b6:	09 f0       	breq	.+2      	; 0x9ba <get_current_time+0x1e>
		sei();
     9b8:	78 94       	sei
	}
	return returnValue;
}
     9ba:	08 95       	ret

000009bc <__vector_14>:

ISR(TIMER0_COMPA_vect) {
     9bc:	1f 92       	push	r1
     9be:	0f 92       	push	r0
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	0f 92       	push	r0
     9c4:	11 24       	eor	r1, r1
     9c6:	8f 93       	push	r24
     9c8:	9f 93       	push	r25
     9ca:	af 93       	push	r26
     9cc:	bf 93       	push	r27
	/* Increment our clock tick count */
	clockTicks++;
     9ce:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <clockTicks>
     9d2:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <clockTicks+0x1>
     9d6:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <clockTicks+0x2>
     9da:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <clockTicks+0x3>
     9de:	01 96       	adiw	r24, 0x01	; 1
     9e0:	a1 1d       	adc	r26, r1
     9e2:	b1 1d       	adc	r27, r1
     9e4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <clockTicks>
     9e8:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <clockTicks+0x1>
     9ec:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <clockTicks+0x2>
     9f0:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <clockTicks+0x3>
}
     9f4:	bf 91       	pop	r27
     9f6:	af 91       	pop	r26
     9f8:	9f 91       	pop	r25
     9fa:	8f 91       	pop	r24
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	0f 90       	pop	r0
     a02:	1f 90       	pop	r1
     a04:	18 95       	reti

00000a06 <__divmodsi4>:
     a06:	05 2e       	mov	r0, r21
     a08:	97 fb       	bst	r25, 7
     a0a:	1e f4       	brtc	.+6      	; 0xa12 <__divmodsi4+0xc>
     a0c:	00 94       	com	r0
     a0e:	0e 94 1a 05 	call	0xa34	; 0xa34 <__negsi2>
     a12:	57 fd       	sbrc	r21, 7
     a14:	07 d0       	rcall	.+14     	; 0xa24 <__divmodsi4_neg2>
     a16:	0e 94 22 05 	call	0xa44	; 0xa44 <__udivmodsi4>
     a1a:	07 fc       	sbrc	r0, 7
     a1c:	03 d0       	rcall	.+6      	; 0xa24 <__divmodsi4_neg2>
     a1e:	4e f4       	brtc	.+18     	; 0xa32 <__divmodsi4_exit>
     a20:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__negsi2>

00000a24 <__divmodsi4_neg2>:
     a24:	50 95       	com	r21
     a26:	40 95       	com	r20
     a28:	30 95       	com	r19
     a2a:	21 95       	neg	r18
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	4f 4f       	sbci	r20, 0xFF	; 255
     a30:	5f 4f       	sbci	r21, 0xFF	; 255

00000a32 <__divmodsi4_exit>:
     a32:	08 95       	ret

00000a34 <__negsi2>:
     a34:	90 95       	com	r25
     a36:	80 95       	com	r24
     a38:	70 95       	com	r23
     a3a:	61 95       	neg	r22
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255
     a3e:	8f 4f       	sbci	r24, 0xFF	; 255
     a40:	9f 4f       	sbci	r25, 0xFF	; 255
     a42:	08 95       	ret

00000a44 <__udivmodsi4>:
     a44:	a1 e2       	ldi	r26, 0x21	; 33
     a46:	1a 2e       	mov	r1, r26
     a48:	aa 1b       	sub	r26, r26
     a4a:	bb 1b       	sub	r27, r27
     a4c:	fd 01       	movw	r30, r26
     a4e:	0d c0       	rjmp	.+26     	; 0xa6a <__udivmodsi4_ep>

00000a50 <__udivmodsi4_loop>:
     a50:	aa 1f       	adc	r26, r26
     a52:	bb 1f       	adc	r27, r27
     a54:	ee 1f       	adc	r30, r30
     a56:	ff 1f       	adc	r31, r31
     a58:	a2 17       	cp	r26, r18
     a5a:	b3 07       	cpc	r27, r19
     a5c:	e4 07       	cpc	r30, r20
     a5e:	f5 07       	cpc	r31, r21
     a60:	20 f0       	brcs	.+8      	; 0xa6a <__udivmodsi4_ep>
     a62:	a2 1b       	sub	r26, r18
     a64:	b3 0b       	sbc	r27, r19
     a66:	e4 0b       	sbc	r30, r20
     a68:	f5 0b       	sbc	r31, r21

00000a6a <__udivmodsi4_ep>:
     a6a:	66 1f       	adc	r22, r22
     a6c:	77 1f       	adc	r23, r23
     a6e:	88 1f       	adc	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	1a 94       	dec	r1
     a74:	69 f7       	brne	.-38     	; 0xa50 <__udivmodsi4_loop>
     a76:	60 95       	com	r22
     a78:	70 95       	com	r23
     a7a:	80 95       	com	r24
     a7c:	90 95       	com	r25
     a7e:	9b 01       	movw	r18, r22
     a80:	ac 01       	movw	r20, r24
     a82:	bd 01       	movw	r22, r26
     a84:	cf 01       	movw	r24, r30
     a86:	08 95       	ret

00000a88 <fgetc>:
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	ec 01       	movw	r28, r24
     a8e:	2b 81       	ldd	r18, Y+3	; 0x03
     a90:	20 ff       	sbrs	r18, 0
     a92:	33 c0       	rjmp	.+102    	; 0xafa <fgetc+0x72>
     a94:	26 ff       	sbrs	r18, 6
     a96:	0a c0       	rjmp	.+20     	; 0xaac <fgetc+0x24>
     a98:	2f 7b       	andi	r18, 0xBF	; 191
     a9a:	2b 83       	std	Y+3, r18	; 0x03
     a9c:	8e 81       	ldd	r24, Y+6	; 0x06
     a9e:	9f 81       	ldd	r25, Y+7	; 0x07
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	9f 83       	std	Y+7, r25	; 0x07
     aa4:	8e 83       	std	Y+6, r24	; 0x06
     aa6:	8a 81       	ldd	r24, Y+2	; 0x02
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	29 c0       	rjmp	.+82     	; 0xafe <fgetc+0x76>
     aac:	22 ff       	sbrs	r18, 2
     aae:	0f c0       	rjmp	.+30     	; 0xace <fgetc+0x46>
     ab0:	e8 81       	ld	r30, Y
     ab2:	f9 81       	ldd	r31, Y+1	; 0x01
     ab4:	80 81       	ld	r24, Z
     ab6:	08 2e       	mov	r0, r24
     ab8:	00 0c       	add	r0, r0
     aba:	99 0b       	sbc	r25, r25
     abc:	00 97       	sbiw	r24, 0x00	; 0
     abe:	19 f4       	brne	.+6      	; 0xac6 <fgetc+0x3e>
     ac0:	20 62       	ori	r18, 0x20	; 32
     ac2:	2b 83       	std	Y+3, r18	; 0x03
     ac4:	1a c0       	rjmp	.+52     	; 0xafa <fgetc+0x72>
     ac6:	31 96       	adiw	r30, 0x01	; 1
     ac8:	f9 83       	std	Y+1, r31	; 0x01
     aca:	e8 83       	st	Y, r30
     acc:	0e c0       	rjmp	.+28     	; 0xaea <fgetc+0x62>
     ace:	ea 85       	ldd	r30, Y+10	; 0x0a
     ad0:	fb 85       	ldd	r31, Y+11	; 0x0b
     ad2:	09 95       	icall
     ad4:	97 ff       	sbrs	r25, 7
     ad6:	09 c0       	rjmp	.+18     	; 0xaea <fgetc+0x62>
     ad8:	2b 81       	ldd	r18, Y+3	; 0x03
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	11 f0       	breq	.+4      	; 0xae2 <fgetc+0x5a>
     ade:	80 e2       	ldi	r24, 0x20	; 32
     ae0:	01 c0       	rjmp	.+2      	; 0xae4 <fgetc+0x5c>
     ae2:	80 e1       	ldi	r24, 0x10	; 16
     ae4:	82 2b       	or	r24, r18
     ae6:	8b 83       	std	Y+3, r24	; 0x03
     ae8:	08 c0       	rjmp	.+16     	; 0xafa <fgetc+0x72>
     aea:	2e 81       	ldd	r18, Y+6	; 0x06
     aec:	3f 81       	ldd	r19, Y+7	; 0x07
     aee:	2f 5f       	subi	r18, 0xFF	; 255
     af0:	3f 4f       	sbci	r19, 0xFF	; 255
     af2:	3f 83       	std	Y+7, r19	; 0x07
     af4:	2e 83       	std	Y+6, r18	; 0x06
     af6:	99 27       	eor	r25, r25
     af8:	02 c0       	rjmp	.+4      	; 0xafe <fgetc+0x76>
     afa:	8f ef       	ldi	r24, 0xFF	; 255
     afc:	9f ef       	ldi	r25, 0xFF	; 255
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <printf_P>:
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	e8 e8       	ldi	r30, 0x88	; 136
     b0a:	f5 e0       	ldi	r31, 0x05	; 5
     b0c:	0c 94 47 08 	jmp	0x108e	; 0x108e <__prologue_saves__+0x1c>
     b10:	ae 01       	movw	r20, r28
     b12:	49 5f       	subi	r20, 0xF9	; 249
     b14:	5f 4f       	sbci	r21, 0xFF	; 255
     b16:	da 01       	movw	r26, r20
     b18:	6d 91       	ld	r22, X+
     b1a:	7d 91       	ld	r23, X+
     b1c:	ad 01       	movw	r20, r26
     b1e:	0a e5       	ldi	r16, 0x5A	; 90
     b20:	12 e0       	ldi	r17, 0x02	; 2
     b22:	f8 01       	movw	r30, r16
     b24:	82 81       	ldd	r24, Z+2	; 0x02
     b26:	93 81       	ldd	r25, Z+3	; 0x03
     b28:	dc 01       	movw	r26, r24
     b2a:	13 96       	adiw	r26, 0x03	; 3
     b2c:	2c 91       	ld	r18, X
     b2e:	13 97       	sbiw	r26, 0x03	; 3
     b30:	28 60       	ori	r18, 0x08	; 8
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	2c 93       	st	X, r18
     b36:	0e 94 a8 05 	call	0xb50	; 0xb50 <vfprintf>
     b3a:	d8 01       	movw	r26, r16
     b3c:	12 96       	adiw	r26, 0x02	; 2
     b3e:	ed 91       	ld	r30, X+
     b40:	fc 91       	ld	r31, X
     b42:	13 97       	sbiw	r26, 0x03	; 3
     b44:	23 81       	ldd	r18, Z+3	; 0x03
     b46:	27 7f       	andi	r18, 0xF7	; 247
     b48:	23 83       	std	Z+3, r18	; 0x03
     b4a:	e4 e0       	ldi	r30, 0x04	; 4
     b4c:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__epilogue_restores__+0x1c>

00000b50 <vfprintf>:
     b50:	ab e0       	ldi	r26, 0x0B	; 11
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	ee ea       	ldi	r30, 0xAE	; 174
     b56:	f5 e0       	ldi	r31, 0x05	; 5
     b58:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__prologue_saves__>
     b5c:	6c 01       	movw	r12, r24
     b5e:	7b 01       	movw	r14, r22
     b60:	8a 01       	movw	r16, r20
     b62:	fc 01       	movw	r30, r24
     b64:	17 82       	std	Z+7, r1	; 0x07
     b66:	16 82       	std	Z+6, r1	; 0x06
     b68:	83 81       	ldd	r24, Z+3	; 0x03
     b6a:	81 ff       	sbrs	r24, 1
     b6c:	cc c1       	rjmp	.+920    	; 0xf06 <vfprintf+0x3b6>
     b6e:	ce 01       	movw	r24, r28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	3c 01       	movw	r6, r24
     b74:	f6 01       	movw	r30, r12
     b76:	93 81       	ldd	r25, Z+3	; 0x03
     b78:	f7 01       	movw	r30, r14
     b7a:	93 fd       	sbrc	r25, 3
     b7c:	85 91       	lpm	r24, Z+
     b7e:	93 ff       	sbrs	r25, 3
     b80:	81 91       	ld	r24, Z+
     b82:	7f 01       	movw	r14, r30
     b84:	88 23       	and	r24, r24
     b86:	09 f4       	brne	.+2      	; 0xb8a <vfprintf+0x3a>
     b88:	ba c1       	rjmp	.+884    	; 0xefe <vfprintf+0x3ae>
     b8a:	85 32       	cpi	r24, 0x25	; 37
     b8c:	39 f4       	brne	.+14     	; 0xb9c <vfprintf+0x4c>
     b8e:	93 fd       	sbrc	r25, 3
     b90:	85 91       	lpm	r24, Z+
     b92:	93 ff       	sbrs	r25, 3
     b94:	81 91       	ld	r24, Z+
     b96:	7f 01       	movw	r14, r30
     b98:	85 32       	cpi	r24, 0x25	; 37
     b9a:	29 f4       	brne	.+10     	; 0xba6 <vfprintf+0x56>
     b9c:	b6 01       	movw	r22, r12
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     ba4:	e7 cf       	rjmp	.-50     	; 0xb74 <vfprintf+0x24>
     ba6:	91 2c       	mov	r9, r1
     ba8:	21 2c       	mov	r2, r1
     baa:	31 2c       	mov	r3, r1
     bac:	ff e1       	ldi	r31, 0x1F	; 31
     bae:	f3 15       	cp	r31, r3
     bb0:	d8 f0       	brcs	.+54     	; 0xbe8 <vfprintf+0x98>
     bb2:	8b 32       	cpi	r24, 0x2B	; 43
     bb4:	79 f0       	breq	.+30     	; 0xbd4 <vfprintf+0x84>
     bb6:	38 f4       	brcc	.+14     	; 0xbc6 <vfprintf+0x76>
     bb8:	80 32       	cpi	r24, 0x20	; 32
     bba:	79 f0       	breq	.+30     	; 0xbda <vfprintf+0x8a>
     bbc:	83 32       	cpi	r24, 0x23	; 35
     bbe:	a1 f4       	brne	.+40     	; 0xbe8 <vfprintf+0x98>
     bc0:	23 2d       	mov	r18, r3
     bc2:	20 61       	ori	r18, 0x10	; 16
     bc4:	1d c0       	rjmp	.+58     	; 0xc00 <vfprintf+0xb0>
     bc6:	8d 32       	cpi	r24, 0x2D	; 45
     bc8:	61 f0       	breq	.+24     	; 0xbe2 <vfprintf+0x92>
     bca:	80 33       	cpi	r24, 0x30	; 48
     bcc:	69 f4       	brne	.+26     	; 0xbe8 <vfprintf+0x98>
     bce:	23 2d       	mov	r18, r3
     bd0:	21 60       	ori	r18, 0x01	; 1
     bd2:	16 c0       	rjmp	.+44     	; 0xc00 <vfprintf+0xb0>
     bd4:	83 2d       	mov	r24, r3
     bd6:	82 60       	ori	r24, 0x02	; 2
     bd8:	38 2e       	mov	r3, r24
     bda:	e3 2d       	mov	r30, r3
     bdc:	e4 60       	ori	r30, 0x04	; 4
     bde:	3e 2e       	mov	r3, r30
     be0:	2a c0       	rjmp	.+84     	; 0xc36 <vfprintf+0xe6>
     be2:	f3 2d       	mov	r31, r3
     be4:	f8 60       	ori	r31, 0x08	; 8
     be6:	1d c0       	rjmp	.+58     	; 0xc22 <vfprintf+0xd2>
     be8:	37 fc       	sbrc	r3, 7
     bea:	2d c0       	rjmp	.+90     	; 0xc46 <vfprintf+0xf6>
     bec:	20 ed       	ldi	r18, 0xD0	; 208
     bee:	28 0f       	add	r18, r24
     bf0:	2a 30       	cpi	r18, 0x0A	; 10
     bf2:	40 f0       	brcs	.+16     	; 0xc04 <vfprintf+0xb4>
     bf4:	8e 32       	cpi	r24, 0x2E	; 46
     bf6:	b9 f4       	brne	.+46     	; 0xc26 <vfprintf+0xd6>
     bf8:	36 fc       	sbrc	r3, 6
     bfa:	81 c1       	rjmp	.+770    	; 0xefe <vfprintf+0x3ae>
     bfc:	23 2d       	mov	r18, r3
     bfe:	20 64       	ori	r18, 0x40	; 64
     c00:	32 2e       	mov	r3, r18
     c02:	19 c0       	rjmp	.+50     	; 0xc36 <vfprintf+0xe6>
     c04:	36 fe       	sbrs	r3, 6
     c06:	06 c0       	rjmp	.+12     	; 0xc14 <vfprintf+0xc4>
     c08:	8a e0       	ldi	r24, 0x0A	; 10
     c0a:	98 9e       	mul	r9, r24
     c0c:	20 0d       	add	r18, r0
     c0e:	11 24       	eor	r1, r1
     c10:	92 2e       	mov	r9, r18
     c12:	11 c0       	rjmp	.+34     	; 0xc36 <vfprintf+0xe6>
     c14:	ea e0       	ldi	r30, 0x0A	; 10
     c16:	2e 9e       	mul	r2, r30
     c18:	20 0d       	add	r18, r0
     c1a:	11 24       	eor	r1, r1
     c1c:	22 2e       	mov	r2, r18
     c1e:	f3 2d       	mov	r31, r3
     c20:	f0 62       	ori	r31, 0x20	; 32
     c22:	3f 2e       	mov	r3, r31
     c24:	08 c0       	rjmp	.+16     	; 0xc36 <vfprintf+0xe6>
     c26:	8c 36       	cpi	r24, 0x6C	; 108
     c28:	21 f4       	brne	.+8      	; 0xc32 <vfprintf+0xe2>
     c2a:	83 2d       	mov	r24, r3
     c2c:	80 68       	ori	r24, 0x80	; 128
     c2e:	38 2e       	mov	r3, r24
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <vfprintf+0xe6>
     c32:	88 36       	cpi	r24, 0x68	; 104
     c34:	41 f4       	brne	.+16     	; 0xc46 <vfprintf+0xf6>
     c36:	f7 01       	movw	r30, r14
     c38:	93 fd       	sbrc	r25, 3
     c3a:	85 91       	lpm	r24, Z+
     c3c:	93 ff       	sbrs	r25, 3
     c3e:	81 91       	ld	r24, Z+
     c40:	7f 01       	movw	r14, r30
     c42:	81 11       	cpse	r24, r1
     c44:	b3 cf       	rjmp	.-154    	; 0xbac <vfprintf+0x5c>
     c46:	98 2f       	mov	r25, r24
     c48:	9f 7d       	andi	r25, 0xDF	; 223
     c4a:	95 54       	subi	r25, 0x45	; 69
     c4c:	93 30       	cpi	r25, 0x03	; 3
     c4e:	28 f4       	brcc	.+10     	; 0xc5a <vfprintf+0x10a>
     c50:	0c 5f       	subi	r16, 0xFC	; 252
     c52:	1f 4f       	sbci	r17, 0xFF	; 255
     c54:	9f e3       	ldi	r25, 0x3F	; 63
     c56:	99 83       	std	Y+1, r25	; 0x01
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <vfprintf+0x124>
     c5a:	83 36       	cpi	r24, 0x63	; 99
     c5c:	31 f0       	breq	.+12     	; 0xc6a <vfprintf+0x11a>
     c5e:	83 37       	cpi	r24, 0x73	; 115
     c60:	71 f0       	breq	.+28     	; 0xc7e <vfprintf+0x12e>
     c62:	83 35       	cpi	r24, 0x53	; 83
     c64:	09 f0       	breq	.+2      	; 0xc68 <vfprintf+0x118>
     c66:	59 c0       	rjmp	.+178    	; 0xd1a <vfprintf+0x1ca>
     c68:	21 c0       	rjmp	.+66     	; 0xcac <vfprintf+0x15c>
     c6a:	f8 01       	movw	r30, r16
     c6c:	80 81       	ld	r24, Z
     c6e:	89 83       	std	Y+1, r24	; 0x01
     c70:	0e 5f       	subi	r16, 0xFE	; 254
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	88 24       	eor	r8, r8
     c76:	83 94       	inc	r8
     c78:	91 2c       	mov	r9, r1
     c7a:	53 01       	movw	r10, r6
     c7c:	13 c0       	rjmp	.+38     	; 0xca4 <vfprintf+0x154>
     c7e:	28 01       	movw	r4, r16
     c80:	f2 e0       	ldi	r31, 0x02	; 2
     c82:	4f 0e       	add	r4, r31
     c84:	51 1c       	adc	r5, r1
     c86:	f8 01       	movw	r30, r16
     c88:	a0 80       	ld	r10, Z
     c8a:	b1 80       	ldd	r11, Z+1	; 0x01
     c8c:	36 fe       	sbrs	r3, 6
     c8e:	03 c0       	rjmp	.+6      	; 0xc96 <vfprintf+0x146>
     c90:	69 2d       	mov	r22, r9
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <vfprintf+0x14a>
     c96:	6f ef       	ldi	r22, 0xFF	; 255
     c98:	7f ef       	ldi	r23, 0xFF	; 255
     c9a:	c5 01       	movw	r24, r10
     c9c:	0e 94 94 07 	call	0xf28	; 0xf28 <strnlen>
     ca0:	4c 01       	movw	r8, r24
     ca2:	82 01       	movw	r16, r4
     ca4:	f3 2d       	mov	r31, r3
     ca6:	ff 77       	andi	r31, 0x7F	; 127
     ca8:	3f 2e       	mov	r3, r31
     caa:	16 c0       	rjmp	.+44     	; 0xcd8 <vfprintf+0x188>
     cac:	28 01       	movw	r4, r16
     cae:	22 e0       	ldi	r18, 0x02	; 2
     cb0:	42 0e       	add	r4, r18
     cb2:	51 1c       	adc	r5, r1
     cb4:	f8 01       	movw	r30, r16
     cb6:	a0 80       	ld	r10, Z
     cb8:	b1 80       	ldd	r11, Z+1	; 0x01
     cba:	36 fe       	sbrs	r3, 6
     cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <vfprintf+0x174>
     cbe:	69 2d       	mov	r22, r9
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <vfprintf+0x178>
     cc4:	6f ef       	ldi	r22, 0xFF	; 255
     cc6:	7f ef       	ldi	r23, 0xFF	; 255
     cc8:	c5 01       	movw	r24, r10
     cca:	0e 94 89 07 	call	0xf12	; 0xf12 <strnlen_P>
     cce:	4c 01       	movw	r8, r24
     cd0:	f3 2d       	mov	r31, r3
     cd2:	f0 68       	ori	r31, 0x80	; 128
     cd4:	3f 2e       	mov	r3, r31
     cd6:	82 01       	movw	r16, r4
     cd8:	33 fc       	sbrc	r3, 3
     cda:	1b c0       	rjmp	.+54     	; 0xd12 <vfprintf+0x1c2>
     cdc:	82 2d       	mov	r24, r2
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	88 16       	cp	r8, r24
     ce2:	99 06       	cpc	r9, r25
     ce4:	b0 f4       	brcc	.+44     	; 0xd12 <vfprintf+0x1c2>
     ce6:	b6 01       	movw	r22, r12
     ce8:	80 e2       	ldi	r24, 0x20	; 32
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     cf0:	2a 94       	dec	r2
     cf2:	f4 cf       	rjmp	.-24     	; 0xcdc <vfprintf+0x18c>
     cf4:	f5 01       	movw	r30, r10
     cf6:	37 fc       	sbrc	r3, 7
     cf8:	85 91       	lpm	r24, Z+
     cfa:	37 fe       	sbrs	r3, 7
     cfc:	81 91       	ld	r24, Z+
     cfe:	5f 01       	movw	r10, r30
     d00:	b6 01       	movw	r22, r12
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     d08:	21 10       	cpse	r2, r1
     d0a:	2a 94       	dec	r2
     d0c:	21 e0       	ldi	r18, 0x01	; 1
     d0e:	82 1a       	sub	r8, r18
     d10:	91 08       	sbc	r9, r1
     d12:	81 14       	cp	r8, r1
     d14:	91 04       	cpc	r9, r1
     d16:	71 f7       	brne	.-36     	; 0xcf4 <vfprintf+0x1a4>
     d18:	e8 c0       	rjmp	.+464    	; 0xeea <vfprintf+0x39a>
     d1a:	84 36       	cpi	r24, 0x64	; 100
     d1c:	11 f0       	breq	.+4      	; 0xd22 <vfprintf+0x1d2>
     d1e:	89 36       	cpi	r24, 0x69	; 105
     d20:	41 f5       	brne	.+80     	; 0xd72 <vfprintf+0x222>
     d22:	f8 01       	movw	r30, r16
     d24:	37 fe       	sbrs	r3, 7
     d26:	07 c0       	rjmp	.+14     	; 0xd36 <vfprintf+0x1e6>
     d28:	60 81       	ld	r22, Z
     d2a:	71 81       	ldd	r23, Z+1	; 0x01
     d2c:	82 81       	ldd	r24, Z+2	; 0x02
     d2e:	93 81       	ldd	r25, Z+3	; 0x03
     d30:	0c 5f       	subi	r16, 0xFC	; 252
     d32:	1f 4f       	sbci	r17, 0xFF	; 255
     d34:	08 c0       	rjmp	.+16     	; 0xd46 <vfprintf+0x1f6>
     d36:	60 81       	ld	r22, Z
     d38:	71 81       	ldd	r23, Z+1	; 0x01
     d3a:	07 2e       	mov	r0, r23
     d3c:	00 0c       	add	r0, r0
     d3e:	88 0b       	sbc	r24, r24
     d40:	99 0b       	sbc	r25, r25
     d42:	0e 5f       	subi	r16, 0xFE	; 254
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
     d46:	f3 2d       	mov	r31, r3
     d48:	ff 76       	andi	r31, 0x6F	; 111
     d4a:	3f 2e       	mov	r3, r31
     d4c:	97 ff       	sbrs	r25, 7
     d4e:	09 c0       	rjmp	.+18     	; 0xd62 <vfprintf+0x212>
     d50:	90 95       	com	r25
     d52:	80 95       	com	r24
     d54:	70 95       	com	r23
     d56:	61 95       	neg	r22
     d58:	7f 4f       	sbci	r23, 0xFF	; 255
     d5a:	8f 4f       	sbci	r24, 0xFF	; 255
     d5c:	9f 4f       	sbci	r25, 0xFF	; 255
     d5e:	f0 68       	ori	r31, 0x80	; 128
     d60:	3f 2e       	mov	r3, r31
     d62:	2a e0       	ldi	r18, 0x0A	; 10
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	a3 01       	movw	r20, r6
     d68:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__ultoa_invert>
     d6c:	88 2e       	mov	r8, r24
     d6e:	86 18       	sub	r8, r6
     d70:	45 c0       	rjmp	.+138    	; 0xdfc <vfprintf+0x2ac>
     d72:	85 37       	cpi	r24, 0x75	; 117
     d74:	31 f4       	brne	.+12     	; 0xd82 <vfprintf+0x232>
     d76:	23 2d       	mov	r18, r3
     d78:	2f 7e       	andi	r18, 0xEF	; 239
     d7a:	b2 2e       	mov	r11, r18
     d7c:	2a e0       	ldi	r18, 0x0A	; 10
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	25 c0       	rjmp	.+74     	; 0xdcc <vfprintf+0x27c>
     d82:	93 2d       	mov	r25, r3
     d84:	99 7f       	andi	r25, 0xF9	; 249
     d86:	b9 2e       	mov	r11, r25
     d88:	8f 36       	cpi	r24, 0x6F	; 111
     d8a:	c1 f0       	breq	.+48     	; 0xdbc <vfprintf+0x26c>
     d8c:	18 f4       	brcc	.+6      	; 0xd94 <vfprintf+0x244>
     d8e:	88 35       	cpi	r24, 0x58	; 88
     d90:	79 f0       	breq	.+30     	; 0xdb0 <vfprintf+0x260>
     d92:	b5 c0       	rjmp	.+362    	; 0xefe <vfprintf+0x3ae>
     d94:	80 37       	cpi	r24, 0x70	; 112
     d96:	19 f0       	breq	.+6      	; 0xd9e <vfprintf+0x24e>
     d98:	88 37       	cpi	r24, 0x78	; 120
     d9a:	21 f0       	breq	.+8      	; 0xda4 <vfprintf+0x254>
     d9c:	b0 c0       	rjmp	.+352    	; 0xefe <vfprintf+0x3ae>
     d9e:	e9 2f       	mov	r30, r25
     da0:	e0 61       	ori	r30, 0x10	; 16
     da2:	be 2e       	mov	r11, r30
     da4:	b4 fe       	sbrs	r11, 4
     da6:	0d c0       	rjmp	.+26     	; 0xdc2 <vfprintf+0x272>
     da8:	fb 2d       	mov	r31, r11
     daa:	f4 60       	ori	r31, 0x04	; 4
     dac:	bf 2e       	mov	r11, r31
     dae:	09 c0       	rjmp	.+18     	; 0xdc2 <vfprintf+0x272>
     db0:	34 fe       	sbrs	r3, 4
     db2:	0a c0       	rjmp	.+20     	; 0xdc8 <vfprintf+0x278>
     db4:	29 2f       	mov	r18, r25
     db6:	26 60       	ori	r18, 0x06	; 6
     db8:	b2 2e       	mov	r11, r18
     dba:	06 c0       	rjmp	.+12     	; 0xdc8 <vfprintf+0x278>
     dbc:	28 e0       	ldi	r18, 0x08	; 8
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	05 c0       	rjmp	.+10     	; 0xdcc <vfprintf+0x27c>
     dc2:	20 e1       	ldi	r18, 0x10	; 16
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <vfprintf+0x27c>
     dc8:	20 e1       	ldi	r18, 0x10	; 16
     dca:	32 e0       	ldi	r19, 0x02	; 2
     dcc:	f8 01       	movw	r30, r16
     dce:	b7 fe       	sbrs	r11, 7
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <vfprintf+0x290>
     dd2:	60 81       	ld	r22, Z
     dd4:	71 81       	ldd	r23, Z+1	; 0x01
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	0c 5f       	subi	r16, 0xFC	; 252
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
     dde:	06 c0       	rjmp	.+12     	; 0xdec <vfprintf+0x29c>
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 5f       	subi	r16, 0xFE	; 254
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
     dec:	a3 01       	movw	r20, r6
     dee:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__ultoa_invert>
     df2:	88 2e       	mov	r8, r24
     df4:	86 18       	sub	r8, r6
     df6:	fb 2d       	mov	r31, r11
     df8:	ff 77       	andi	r31, 0x7F	; 127
     dfa:	3f 2e       	mov	r3, r31
     dfc:	36 fe       	sbrs	r3, 6
     dfe:	0d c0       	rjmp	.+26     	; 0xe1a <vfprintf+0x2ca>
     e00:	23 2d       	mov	r18, r3
     e02:	2e 7f       	andi	r18, 0xFE	; 254
     e04:	a2 2e       	mov	r10, r18
     e06:	89 14       	cp	r8, r9
     e08:	58 f4       	brcc	.+22     	; 0xe20 <vfprintf+0x2d0>
     e0a:	34 fe       	sbrs	r3, 4
     e0c:	0b c0       	rjmp	.+22     	; 0xe24 <vfprintf+0x2d4>
     e0e:	32 fc       	sbrc	r3, 2
     e10:	09 c0       	rjmp	.+18     	; 0xe24 <vfprintf+0x2d4>
     e12:	83 2d       	mov	r24, r3
     e14:	8e 7e       	andi	r24, 0xEE	; 238
     e16:	a8 2e       	mov	r10, r24
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <vfprintf+0x2d4>
     e1a:	b8 2c       	mov	r11, r8
     e1c:	a3 2c       	mov	r10, r3
     e1e:	03 c0       	rjmp	.+6      	; 0xe26 <vfprintf+0x2d6>
     e20:	b8 2c       	mov	r11, r8
     e22:	01 c0       	rjmp	.+2      	; 0xe26 <vfprintf+0x2d6>
     e24:	b9 2c       	mov	r11, r9
     e26:	a4 fe       	sbrs	r10, 4
     e28:	0f c0       	rjmp	.+30     	; 0xe48 <vfprintf+0x2f8>
     e2a:	fe 01       	movw	r30, r28
     e2c:	e8 0d       	add	r30, r8
     e2e:	f1 1d       	adc	r31, r1
     e30:	80 81       	ld	r24, Z
     e32:	80 33       	cpi	r24, 0x30	; 48
     e34:	21 f4       	brne	.+8      	; 0xe3e <vfprintf+0x2ee>
     e36:	9a 2d       	mov	r25, r10
     e38:	99 7e       	andi	r25, 0xE9	; 233
     e3a:	a9 2e       	mov	r10, r25
     e3c:	09 c0       	rjmp	.+18     	; 0xe50 <vfprintf+0x300>
     e3e:	a2 fe       	sbrs	r10, 2
     e40:	06 c0       	rjmp	.+12     	; 0xe4e <vfprintf+0x2fe>
     e42:	b3 94       	inc	r11
     e44:	b3 94       	inc	r11
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <vfprintf+0x300>
     e48:	8a 2d       	mov	r24, r10
     e4a:	86 78       	andi	r24, 0x86	; 134
     e4c:	09 f0       	breq	.+2      	; 0xe50 <vfprintf+0x300>
     e4e:	b3 94       	inc	r11
     e50:	a3 fc       	sbrc	r10, 3
     e52:	11 c0       	rjmp	.+34     	; 0xe76 <vfprintf+0x326>
     e54:	a0 fe       	sbrs	r10, 0
     e56:	06 c0       	rjmp	.+12     	; 0xe64 <vfprintf+0x314>
     e58:	b2 14       	cp	r11, r2
     e5a:	88 f4       	brcc	.+34     	; 0xe7e <vfprintf+0x32e>
     e5c:	28 0c       	add	r2, r8
     e5e:	92 2c       	mov	r9, r2
     e60:	9b 18       	sub	r9, r11
     e62:	0e c0       	rjmp	.+28     	; 0xe80 <vfprintf+0x330>
     e64:	b2 14       	cp	r11, r2
     e66:	60 f4       	brcc	.+24     	; 0xe80 <vfprintf+0x330>
     e68:	b6 01       	movw	r22, r12
     e6a:	80 e2       	ldi	r24, 0x20	; 32
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     e72:	b3 94       	inc	r11
     e74:	f7 cf       	rjmp	.-18     	; 0xe64 <vfprintf+0x314>
     e76:	b2 14       	cp	r11, r2
     e78:	18 f4       	brcc	.+6      	; 0xe80 <vfprintf+0x330>
     e7a:	2b 18       	sub	r2, r11
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <vfprintf+0x332>
     e7e:	98 2c       	mov	r9, r8
     e80:	21 2c       	mov	r2, r1
     e82:	a4 fe       	sbrs	r10, 4
     e84:	10 c0       	rjmp	.+32     	; 0xea6 <vfprintf+0x356>
     e86:	b6 01       	movw	r22, r12
     e88:	80 e3       	ldi	r24, 0x30	; 48
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     e90:	a2 fe       	sbrs	r10, 2
     e92:	17 c0       	rjmp	.+46     	; 0xec2 <vfprintf+0x372>
     e94:	a1 fc       	sbrc	r10, 1
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <vfprintf+0x34e>
     e98:	88 e7       	ldi	r24, 0x78	; 120
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <vfprintf+0x352>
     e9e:	88 e5       	ldi	r24, 0x58	; 88
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	b6 01       	movw	r22, r12
     ea4:	0c c0       	rjmp	.+24     	; 0xebe <vfprintf+0x36e>
     ea6:	8a 2d       	mov	r24, r10
     ea8:	86 78       	andi	r24, 0x86	; 134
     eaa:	59 f0       	breq	.+22     	; 0xec2 <vfprintf+0x372>
     eac:	a1 fe       	sbrs	r10, 1
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <vfprintf+0x364>
     eb0:	8b e2       	ldi	r24, 0x2B	; 43
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <vfprintf+0x366>
     eb4:	80 e2       	ldi	r24, 0x20	; 32
     eb6:	a7 fc       	sbrc	r10, 7
     eb8:	8d e2       	ldi	r24, 0x2D	; 45
     eba:	b6 01       	movw	r22, r12
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     ec2:	89 14       	cp	r8, r9
     ec4:	38 f4       	brcc	.+14     	; 0xed4 <vfprintf+0x384>
     ec6:	b6 01       	movw	r22, r12
     ec8:	80 e3       	ldi	r24, 0x30	; 48
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     ed0:	9a 94       	dec	r9
     ed2:	f7 cf       	rjmp	.-18     	; 0xec2 <vfprintf+0x372>
     ed4:	8a 94       	dec	r8
     ed6:	f3 01       	movw	r30, r6
     ed8:	e8 0d       	add	r30, r8
     eda:	f1 1d       	adc	r31, r1
     edc:	80 81       	ld	r24, Z
     ede:	b6 01       	movw	r22, r12
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     ee6:	81 10       	cpse	r8, r1
     ee8:	f5 cf       	rjmp	.-22     	; 0xed4 <vfprintf+0x384>
     eea:	22 20       	and	r2, r2
     eec:	09 f4       	brne	.+2      	; 0xef0 <vfprintf+0x3a0>
     eee:	42 ce       	rjmp	.-892    	; 0xb74 <vfprintf+0x24>
     ef0:	b6 01       	movw	r22, r12
     ef2:	80 e2       	ldi	r24, 0x20	; 32
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     efa:	2a 94       	dec	r2
     efc:	f6 cf       	rjmp	.-20     	; 0xeea <vfprintf+0x39a>
     efe:	f6 01       	movw	r30, r12
     f00:	86 81       	ldd	r24, Z+6	; 0x06
     f02:	97 81       	ldd	r25, Z+7	; 0x07
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <vfprintf+0x3ba>
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	9f ef       	ldi	r25, 0xFF	; 255
     f0a:	2b 96       	adiw	r28, 0x0b	; 11
     f0c:	e2 e1       	ldi	r30, 0x12	; 18
     f0e:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__epilogue_restores__>

00000f12 <strnlen_P>:
     f12:	fc 01       	movw	r30, r24
     f14:	05 90       	lpm	r0, Z+
     f16:	61 50       	subi	r22, 0x01	; 1
     f18:	70 40       	sbci	r23, 0x00	; 0
     f1a:	01 10       	cpse	r0, r1
     f1c:	d8 f7       	brcc	.-10     	; 0xf14 <strnlen_P+0x2>
     f1e:	80 95       	com	r24
     f20:	90 95       	com	r25
     f22:	8e 0f       	add	r24, r30
     f24:	9f 1f       	adc	r25, r31
     f26:	08 95       	ret

00000f28 <strnlen>:
     f28:	fc 01       	movw	r30, r24
     f2a:	61 50       	subi	r22, 0x01	; 1
     f2c:	70 40       	sbci	r23, 0x00	; 0
     f2e:	01 90       	ld	r0, Z+
     f30:	01 10       	cpse	r0, r1
     f32:	d8 f7       	brcc	.-10     	; 0xf2a <strnlen+0x2>
     f34:	80 95       	com	r24
     f36:	90 95       	com	r25
     f38:	8e 0f       	add	r24, r30
     f3a:	9f 1f       	adc	r25, r31
     f3c:	08 95       	ret

00000f3e <fputc>:
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	fb 01       	movw	r30, r22
     f48:	23 81       	ldd	r18, Z+3	; 0x03
     f4a:	21 fd       	sbrc	r18, 1
     f4c:	03 c0       	rjmp	.+6      	; 0xf54 <fputc+0x16>
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	9f ef       	ldi	r25, 0xFF	; 255
     f52:	2c c0       	rjmp	.+88     	; 0xfac <fputc+0x6e>
     f54:	22 ff       	sbrs	r18, 2
     f56:	16 c0       	rjmp	.+44     	; 0xf84 <fputc+0x46>
     f58:	46 81       	ldd	r20, Z+6	; 0x06
     f5a:	57 81       	ldd	r21, Z+7	; 0x07
     f5c:	24 81       	ldd	r18, Z+4	; 0x04
     f5e:	35 81       	ldd	r19, Z+5	; 0x05
     f60:	42 17       	cp	r20, r18
     f62:	53 07       	cpc	r21, r19
     f64:	44 f4       	brge	.+16     	; 0xf76 <fputc+0x38>
     f66:	a0 81       	ld	r26, Z
     f68:	b1 81       	ldd	r27, Z+1	; 0x01
     f6a:	9d 01       	movw	r18, r26
     f6c:	2f 5f       	subi	r18, 0xFF	; 255
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	31 83       	std	Z+1, r19	; 0x01
     f72:	20 83       	st	Z, r18
     f74:	8c 93       	st	X, r24
     f76:	26 81       	ldd	r18, Z+6	; 0x06
     f78:	37 81       	ldd	r19, Z+7	; 0x07
     f7a:	2f 5f       	subi	r18, 0xFF	; 255
     f7c:	3f 4f       	sbci	r19, 0xFF	; 255
     f7e:	37 83       	std	Z+7, r19	; 0x07
     f80:	26 83       	std	Z+6, r18	; 0x06
     f82:	14 c0       	rjmp	.+40     	; 0xfac <fputc+0x6e>
     f84:	8b 01       	movw	r16, r22
     f86:	ec 01       	movw	r28, r24
     f88:	fb 01       	movw	r30, r22
     f8a:	00 84       	ldd	r0, Z+8	; 0x08
     f8c:	f1 85       	ldd	r31, Z+9	; 0x09
     f8e:	e0 2d       	mov	r30, r0
     f90:	09 95       	icall
     f92:	89 2b       	or	r24, r25
     f94:	e1 f6       	brne	.-72     	; 0xf4e <fputc+0x10>
     f96:	d8 01       	movw	r26, r16
     f98:	16 96       	adiw	r26, 0x06	; 6
     f9a:	8d 91       	ld	r24, X+
     f9c:	9c 91       	ld	r25, X
     f9e:	17 97       	sbiw	r26, 0x07	; 7
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	17 96       	adiw	r26, 0x07	; 7
     fa4:	9c 93       	st	X, r25
     fa6:	8e 93       	st	-X, r24
     fa8:	16 97       	sbiw	r26, 0x06	; 6
     faa:	ce 01       	movw	r24, r28
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	08 95       	ret

00000fb6 <__ultoa_invert>:
     fb6:	fa 01       	movw	r30, r20
     fb8:	aa 27       	eor	r26, r26
     fba:	28 30       	cpi	r18, 0x08	; 8
     fbc:	51 f1       	breq	.+84     	; 0x1012 <__ultoa_invert+0x5c>
     fbe:	20 31       	cpi	r18, 0x10	; 16
     fc0:	81 f1       	breq	.+96     	; 0x1022 <__ultoa_invert+0x6c>
     fc2:	e8 94       	clt
     fc4:	6f 93       	push	r22
     fc6:	6e 7f       	andi	r22, 0xFE	; 254
     fc8:	6e 5f       	subi	r22, 0xFE	; 254
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	8f 4f       	sbci	r24, 0xFF	; 255
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	af 4f       	sbci	r26, 0xFF	; 255
     fd2:	b1 e0       	ldi	r27, 0x01	; 1
     fd4:	3e d0       	rcall	.+124    	; 0x1052 <__ultoa_invert+0x9c>
     fd6:	b4 e0       	ldi	r27, 0x04	; 4
     fd8:	3c d0       	rcall	.+120    	; 0x1052 <__ultoa_invert+0x9c>
     fda:	67 0f       	add	r22, r23
     fdc:	78 1f       	adc	r23, r24
     fde:	89 1f       	adc	r24, r25
     fe0:	9a 1f       	adc	r25, r26
     fe2:	a1 1d       	adc	r26, r1
     fe4:	68 0f       	add	r22, r24
     fe6:	79 1f       	adc	r23, r25
     fe8:	8a 1f       	adc	r24, r26
     fea:	91 1d       	adc	r25, r1
     fec:	a1 1d       	adc	r26, r1
     fee:	6a 0f       	add	r22, r26
     ff0:	71 1d       	adc	r23, r1
     ff2:	81 1d       	adc	r24, r1
     ff4:	91 1d       	adc	r25, r1
     ff6:	a1 1d       	adc	r26, r1
     ff8:	20 d0       	rcall	.+64     	; 0x103a <__ultoa_invert+0x84>
     ffa:	09 f4       	brne	.+2      	; 0xffe <__ultoa_invert+0x48>
     ffc:	68 94       	set
     ffe:	3f 91       	pop	r19
    1000:	2a e0       	ldi	r18, 0x0A	; 10
    1002:	26 9f       	mul	r18, r22
    1004:	11 24       	eor	r1, r1
    1006:	30 19       	sub	r19, r0
    1008:	30 5d       	subi	r19, 0xD0	; 208
    100a:	31 93       	st	Z+, r19
    100c:	de f6       	brtc	.-74     	; 0xfc4 <__ultoa_invert+0xe>
    100e:	cf 01       	movw	r24, r30
    1010:	08 95       	ret
    1012:	46 2f       	mov	r20, r22
    1014:	47 70       	andi	r20, 0x07	; 7
    1016:	40 5d       	subi	r20, 0xD0	; 208
    1018:	41 93       	st	Z+, r20
    101a:	b3 e0       	ldi	r27, 0x03	; 3
    101c:	0f d0       	rcall	.+30     	; 0x103c <__ultoa_invert+0x86>
    101e:	c9 f7       	brne	.-14     	; 0x1012 <__ultoa_invert+0x5c>
    1020:	f6 cf       	rjmp	.-20     	; 0x100e <__ultoa_invert+0x58>
    1022:	46 2f       	mov	r20, r22
    1024:	4f 70       	andi	r20, 0x0F	; 15
    1026:	40 5d       	subi	r20, 0xD0	; 208
    1028:	4a 33       	cpi	r20, 0x3A	; 58
    102a:	18 f0       	brcs	.+6      	; 0x1032 <__ultoa_invert+0x7c>
    102c:	49 5d       	subi	r20, 0xD9	; 217
    102e:	31 fd       	sbrc	r19, 1
    1030:	40 52       	subi	r20, 0x20	; 32
    1032:	41 93       	st	Z+, r20
    1034:	02 d0       	rcall	.+4      	; 0x103a <__ultoa_invert+0x84>
    1036:	a9 f7       	brne	.-22     	; 0x1022 <__ultoa_invert+0x6c>
    1038:	ea cf       	rjmp	.-44     	; 0x100e <__ultoa_invert+0x58>
    103a:	b4 e0       	ldi	r27, 0x04	; 4
    103c:	a6 95       	lsr	r26
    103e:	97 95       	ror	r25
    1040:	87 95       	ror	r24
    1042:	77 95       	ror	r23
    1044:	67 95       	ror	r22
    1046:	ba 95       	dec	r27
    1048:	c9 f7       	brne	.-14     	; 0x103c <__ultoa_invert+0x86>
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	61 05       	cpc	r22, r1
    104e:	71 05       	cpc	r23, r1
    1050:	08 95       	ret
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
    1056:	0a 2e       	mov	r0, r26
    1058:	06 94       	lsr	r0
    105a:	57 95       	ror	r21
    105c:	47 95       	ror	r20
    105e:	37 95       	ror	r19
    1060:	27 95       	ror	r18
    1062:	ba 95       	dec	r27
    1064:	c9 f7       	brne	.-14     	; 0x1058 <__ultoa_invert+0xa2>
    1066:	62 0f       	add	r22, r18
    1068:	73 1f       	adc	r23, r19
    106a:	84 1f       	adc	r24, r20
    106c:	95 1f       	adc	r25, r21
    106e:	a0 1d       	adc	r26, r0
    1070:	08 95       	ret

00001072 <__prologue_saves__>:
    1072:	2f 92       	push	r2
    1074:	3f 92       	push	r3
    1076:	4f 92       	push	r4
    1078:	5f 92       	push	r5
    107a:	6f 92       	push	r6
    107c:	7f 92       	push	r7
    107e:	8f 92       	push	r8
    1080:	9f 92       	push	r9
    1082:	af 92       	push	r10
    1084:	bf 92       	push	r11
    1086:	cf 92       	push	r12
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	ca 1b       	sub	r28, r26
    109c:	db 0b       	sbc	r29, r27
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	09 94       	ijmp

000010aa <__epilogue_restores__>:
    10aa:	2a 88       	ldd	r2, Y+18	; 0x12
    10ac:	39 88       	ldd	r3, Y+17	; 0x11
    10ae:	48 88       	ldd	r4, Y+16	; 0x10
    10b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    10b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    10b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    10b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    10b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    10ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    10bc:	b9 84       	ldd	r11, Y+9	; 0x09
    10be:	c8 84       	ldd	r12, Y+8	; 0x08
    10c0:	df 80       	ldd	r13, Y+7	; 0x07
    10c2:	ee 80       	ldd	r14, Y+6	; 0x06
    10c4:	fd 80       	ldd	r15, Y+5	; 0x05
    10c6:	0c 81       	ldd	r16, Y+4	; 0x04
    10c8:	1b 81       	ldd	r17, Y+3	; 0x03
    10ca:	aa 81       	ldd	r26, Y+2	; 0x02
    10cc:	b9 81       	ldd	r27, Y+1	; 0x01
    10ce:	ce 0f       	add	r28, r30
    10d0:	d1 1d       	adc	r29, r1
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	ed 01       	movw	r28, r26
    10de:	08 95       	ret

000010e0 <_exit>:
    10e0:	f8 94       	cli

000010e2 <__stop_program>:
    10e2:	ff cf       	rjmp	.-2      	; 0x10e2 <__stop_program>
